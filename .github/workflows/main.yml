on:
  push:
    branches:
      - master
      - stable
  pull_request:
    branches:
      - master
name: Linux CI
jobs:
  build:
    runs-on: ubuntu-latest
    name: Linux build & test
    env:
      BINTRAY_API_KEY_DEFINED: ${{!!secrets.BINTRAY_API_KEY}}
      PROCESSORS: 0
      PREFIX: "/tmp/ADALIB_DIR"
      GPR_PROJECT_PATH: /tmp/ADALIB_DIR/share/gpr
    steps:
      - name: Get libadalang
        uses: actions/checkout@v2

      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Get langkit
        uses: actions/checkout@v2
        with:
          repository: AdaCore/langkit
          path: langkit
          fetch-depth: 0  # all branches

      - name: Checkout langkit branch
        run: |
            (
                cd langkit
                python ../utils/gh-langkit-branch.py \
                    $GITHUB_REPOSITORY $GITHUB_REF \
                    ${{ github.event.pull_request.head.user.login }} \
                    ${{ github.event.pull_request.head.ref }}
            )

      - name: Install python dependencies
        run: |
            pip install -r langkit/REQUIREMENTS.dev
            pip install jsonschema
            pip install ./langkit

      - name: Get gprbuild for libgpr
        uses: actions/checkout@v2
        with:
          repository: AdaCore/gprbuild
          path: gprbuild

      - name: Get gnatcoll core
        uses: actions/checkout@v2
        with:
          repository: AdaCore/gnatcoll-core
          path: gnatcoll-core

      - name: Get gnatcoll iconv/gmp
        uses: actions/checkout@v2
        with:
          repository: AdaCore/gnatcoll-bindings
          path: gnatcoll-bindings

      - uses: actions/cache@v2
        with:
          path: ./cached_gnat
          key: ${{ runner.os }}-gnat-ce-2020
      - name: Get GNAT Community 2020 toolchain
        uses: ada-actions/toolchain@52618bd
        with:
          distrib: community
          install_dir: ./cached_gnat
      - name: Clean up GNAT
        # TODO: For unknown reasons, even with all caches disabled, there are
        # sometimes spurious installs of dependencies (gnatcoll-iconv, -gmp and
        # langkit_support) in cached_gnat's install. Try to uninstall them to
        # workaround this issue. We need to uninstall gpr and gnatcoll anyway,
        # as we want their latest versions.
        run: |
            sh langkit/.github/helpers/clean_up_gnat.sh

      - name: Cache build artifacts
        uses: actions/cache@v2
        id: cache
        with:
          path: |
              gprbuild/gpr/libobj
              gnatcoll-core/obj
              gnatcoll-bindings/gmp/obj
              gnatcoll-bindings/iconv/obj
              build/obj
              langkit/contrib/python/build/obj
              langkit/contrib/lkt/build/obj
          key: ${{ runner.os }}-build-artifacts

      - name: Build dependencies
        run: |
            make -C gprbuild \
                prefix=$PREFIX \
                libgpr.build.shared libgpr.install.shared
            make -C gnatcoll-core prefix=$PREFIX \
                LIBRARY_TYPES="relocatable" build install
            python gnatcoll-bindings/iconv/setup.py \
                build -j0 --prefix=$PREFIX --library-types=relocatable
            python gnatcoll-bindings/iconv/setup.py install
            python gnatcoll-bindings/gmp/setup.py build \
                -j0 --prefix=$PREFIX --library-types=relocatable
            python gnatcoll-bindings/gmp/setup.py install

      - name: Build Langkit
        run: |
            langkit/manage.py build-langkit-support
            langkit/manage.py install-langkit-support $PREFIX
            langkit/manage.py make --no-langkit-support

      - name: Build libadalang
        run: |
            langkit/utils/gh_wrap_errors.py ./manage.py make -Dgnu-full

      - name: Install & package libadalang
        run: |
            langkit/utils/gh_wrap_errors.py ./manage.py install $PREFIX
            tar czf libadalang-`basename $GITHUB_REF`-linux.tar.gz -C $PREFIX .
            cp libadalang-`basename $GITHUB_REF`-linux.tar.gz libadalang-latest.tar.gz

      # Try to upload the install tree to Bintray, but only if we have the
      # corresponding secret, i.e. if we are running on the upstream
      # repository.
      - name: Upload tar-ball to Bintray
        if: ${{github.event_name == 'push' && env.BINTRAY_API_KEY_DEFINED == 'true'}}
        uses: reznikmm/upload-bintray-action@v2
        with:
          subject: reznikmm
          username: reznikmm
          repository: libadalang
          package: libadalang
          version: 0.1-git
          sourcePath: '*.tar.gz'
          override: 1
          apiKey: ${{secrets.BINTRAY_API_KEY}}

      - uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
            route: GET /repos/:repository/releases/latest
            repository: ${{ github.repository }}
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: get upload url
        id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo "::set-output name=url::$url"
        env:
            response:  ${{ steps.get_latest_release.outputs.data }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.get_upload_url.outputs.url}}
          asset_path: ./libadalang-latest.tar.gz
          asset_name: libadalang-latest.tar.gz
          asset_content_type: application/gzip

      - name: Test libadalang
        run: |
            eval `langkit/manage.py setenv`
            ./manage.py test --disable-ocaml --failure-exit-code=1 --for-travis-ci

  stylechecks:
    runs-on: ubuntu-latest
    name: Stylechecks
    env:
      PROCESSORS: 0
      PREFIX: "/tmp/ADALIB_DIR"
      GPR_PROJECT_PATH: /tmp/ADALIB_DIR/share/gpr
    steps:
      - name: Get libadalang
        uses: actions/checkout@v2

      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Get langkit
        uses: actions/checkout@v2
        with:
          repository: AdaCore/langkit
          path: langkit
          fetch-depth: 0  # all branches

      - name: Checkout langkit branch
        run: |
            (
                cd langkit
                python ../utils/gh-langkit-branch.py \
                    $GITHUB_REPOSITORY $GITHUB_REF \
                    ${{ github.event.pull_request.head.user.login }} \
                    ${{ github.event.pull_request.head.ref }}
            )

      - name: Install python dependencies
        run: |
            pip install -r langkit/REQUIREMENTS.dev
            pip install jsonschema
            pip install langkit/

      - name: Run libadalang stylechecks
        run: |
            set -x -e
            langkit/utils/gh_wrap_errors.py python testsuite/python_support/stylechecks.py
