--  vim: ft=ada

overriding function Short_Image
  (Node : access Basic_Decl_Type)
   return Text_Type
is
   Self : access Basic_Decl_Type'Class := Node;
   Ret : Unbounded_Wide_Wide_String;

   function Name_Image (Node : access Expr_Type'Class) return Text_Type;
   --  Print a Dotted Name

   function Name_Image (Node : access Expr_Type'Class) return Text_Type
   is
      D : Dotted_Name;
   begin
      if Node = null then
         return "None";
      end if;

      if Node.all in Single_Tok_Node_Type'Class then
         return Text
           (F_Tok (Single_Tok_Node_Type (Node.all)'Access));
      elsif Node.all in Dotted_Name_Type'Class then
         D := Dotted_Name_Type (Node.all)'Access;
         return Name_Image (D.F_Prefix) & "." & Name_Image (D.F_Suffix);
      else
         return "<>";
      end if;
   end Name_Image;

   Children : Name_Array := Self.P_Defining_Names;
begin
   Append (Ret, "<" & To_Text (Kind_Name (Self)) & " [");

   for I in Children'Range loop
      Append (Ret, """");
      Append (Ret, Name_Image (Children (I)));
         Append (Ret, """");
      if I /= Children'Last then
         Append (Ret, ", ");
      end if;
   end loop;

   Append (Ret, "] " & To_Text (Image (Sloc_Range (Node))) & ">");
   return To_Wide_Wide_String (Ret);
end Short_Image;
