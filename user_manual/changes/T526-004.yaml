type: api-change
title: Improve concatenation operator handling
description: |
  This change aims to fix the handling of very long strings concatenation which
  often occurs in practice. Indeed, a few hundreds of concatenations led to a
  stack overflow when libadalang resolves names. This was due to the fact that
  concatenation expressions, since ``&`` is a binary operator, was represented
  as a tree. This tree being as deep as the length of the expression, requiring
  deep recursions, leading to overflows. Libadalang now handles such expression
  as a list of operands to avoid those deep recursions.

  Consequently, a concatenation expression of n operands, is now composed of one
  single ``ConcatOp`` instead of a tree of n-1 ``BinOp``. For example, see below
  the before/after representation of ``A & B & C & D & E``:

  .. code-block::

      BinOp(
        Binop(
          BinOp(
            BinOp(A, &, B), & , C), &, D), &, E)

  This tree is now represented by a single operator (``ConcatOp``), handling a
  list of operands that can be processed without having to perform recursions:

  .. code-block::

      ConcatOp(A,
        ConcatOperand(&, B),
        ConcatOperand(&, C),
        ConcatOperand(&, D),
        ConcatOperand(&, E))

date: 2022-07-08
