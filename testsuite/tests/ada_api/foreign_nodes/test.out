===================
== Reloading Pkg ==
===================
## Pkg ##
$root = LexEnv(Static_Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] __standard:1:1-123:14>]

@2 = LexEnv(Static_Primary, Parent=@1, Node=<PackageDecl ["Pkg"] pkg.ads:1:1-3:9>):
    child: [<PackageDecl ["Pkg.Child"] pkg-child.ads:1:1-3:15>]
    p1: [<NullSubpDecl ["P1"] pkg.ads:2:4-2:25>]

@1 = LexEnv(Static_Primary, Parent=$root, Node=<PackageDecl ["Standard"] __standard:1:1-123:14>):
    'a': [<EnumLiteralDecl ["'A'"] __standard:21:22-21:25>, <EnumLiteralDecl ["'A'"] __standard:22:27-22:30>, <EnumLiteralDecl ["'A'"] __standard:23:32-23:35>]
    ascii: [<PackageDecl ["ASCII"] __standard:24:3-104:13>]
    boolean: [<TypeDecl ["Boolean"] __standard:3:3-3:33>]
    character: [<TypeDecl ["Character"] __standard:21:3-21:27>]
    constraint_error: [<ExceptionDecl ["Constraint_Error"] __standard:116:3-116:32>]
    duration: [<TypeDecl ["Duration"] __standard:112:3-114:42>]
    false: [<EnumLiteralDecl ["False"] __standard:3:20-3:25>]
    float: [<TypeDecl ["Float"] __standard:14:3-15:51>]
    integer: [<TypeDecl ["Integer"] __standard:4:3-4:54>]
    long_float: [<TypeDecl ["Long_Float"] __standard:16:3-17:73>]
    long_integer: [<TypeDecl ["Long_Integer"] __standard:9:3-9:69>]
    long_long_float: [<TypeDecl ["Long_Long_Float"] __standard:18:3-20:33>]
    long_long_integer: [<TypeDecl ["Long_Long_Integer"] __standard:10:3-10:69>]
    long_long_long_integer: [<TypeDecl ["Long_Long_Long_Integer"] __standard:11:3-11:71>]
    natural: [<SubtypeDecl ["Natural"] __standard:5:3-5:57>]
    numeric_error: [<ExceptionDecl ["Numeric_Error"] __standard:117:3-117:32>]
    pkg: [<PackageDecl ["Pkg"] pkg.ads:1:1-3:9>]
    positive: [<SubtypeDecl ["Positive"] __standard:6:3-6:57>]
    program_error: [<ExceptionDecl ["Program_Error"] __standard:118:3-118:32>]
    short_float: [<TypeDecl ["Short_Float"] __standard:12:3-13:51>]
    short_integer: [<TypeDecl ["Short_Integer"] __standard:8:3-8:69>]
    short_short_integer: [<TypeDecl ["Short_Short_Integer"] __standard:7:3-7:67>]
    storage_error: [<ExceptionDecl ["Storage_Error"] __standard:119:3-119:32>]
    string: [<TypeDecl ["String"] __standard:105:3-105:57>]
    tasking_error: [<ExceptionDecl ["Tasking_Error"] __standard:120:3-120:32>]
    true: [<EnumLiteralDecl ["True"] __standard:3:27-3:31>]
    universal_int_type_: [<TypeDecl ["Universal_Int_Type_"] __standard:121:3-121:45>]
    universal_real_type_: [<TypeDecl ["Universal_Real_Type_"] __standard:122:3-122:42>]
    wide_character: [<TypeDecl ["Wide_Character"] __standard:22:3-22:32>]
    wide_string: [<TypeDecl ["Wide_String"] __standard:107:3-108:39>]
    wide_wide_character: [<TypeDecl ["Wide_Wide_Character"] __standard:23:3-23:37>]
    wide_wide_string: [<TypeDecl ["Wide_Wide_String"] __standard:109:3-110:44>]

$root = LexEnv(Static_Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] __standard:1:1-123:14>]

@3 = LexEnv(Static_Primary, Parent=@2, Node=<NullSubpDecl ["P1"] pkg.ads:2:4-2:25>):
  Referenced: <NullSubpDecl ["P1"] pkg.ads:2:4-2:25>: LexEnv(Static_Primary, Node=<CompilationUnit pkg.ads:1:1-3:9>)
  Referenced: <NullSubpDecl ["P1"] pkg.ads:2:4-2:25>: LexEnv(Static_Primary, Node=<CompilationUnit pkg.ads:1:1-3:9>)
    <empty>

## Child ##
$root = LexEnv(Static_Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] __standard:1:1-123:14>]

@2 = LexEnv(Static_Primary, Parent=@1, Node=<PackageDecl ["Pkg.Child"] pkg-child.ads:1:1-3:15>):
    p2: [<NullSubpDecl ["P2"] pkg-child.ads:2:4-2:25>]

@1 = LexEnv(Static_Primary, Parent=@3, Node=<PackageDecl ["Pkg"] pkg.ads:1:1-3:9>):
    child: [<PackageDecl ["Pkg.Child"] pkg-child.ads:1:1-3:15>]
    p1: [<NullSubpDecl ["P1"] pkg.ads:2:4-2:25>]

@3 = LexEnv(Static_Primary, Parent=$root, Node=<PackageDecl ["Standard"] __standard:1:1-123:14>):
    'a': [<EnumLiteralDecl ["'A'"] __standard:21:22-21:25>, <EnumLiteralDecl ["'A'"] __standard:22:27-22:30>, <EnumLiteralDecl ["'A'"] __standard:23:32-23:35>]
    ascii: [<PackageDecl ["ASCII"] __standard:24:3-104:13>]
    boolean: [<TypeDecl ["Boolean"] __standard:3:3-3:33>]
    character: [<TypeDecl ["Character"] __standard:21:3-21:27>]
    constraint_error: [<ExceptionDecl ["Constraint_Error"] __standard:116:3-116:32>]
    duration: [<TypeDecl ["Duration"] __standard:112:3-114:42>]
    false: [<EnumLiteralDecl ["False"] __standard:3:20-3:25>]
    float: [<TypeDecl ["Float"] __standard:14:3-15:51>]
    integer: [<TypeDecl ["Integer"] __standard:4:3-4:54>]
    long_float: [<TypeDecl ["Long_Float"] __standard:16:3-17:73>]
    long_integer: [<TypeDecl ["Long_Integer"] __standard:9:3-9:69>]
    long_long_float: [<TypeDecl ["Long_Long_Float"] __standard:18:3-20:33>]
    long_long_integer: [<TypeDecl ["Long_Long_Integer"] __standard:10:3-10:69>]
    long_long_long_integer: [<TypeDecl ["Long_Long_Long_Integer"] __standard:11:3-11:71>]
    natural: [<SubtypeDecl ["Natural"] __standard:5:3-5:57>]
    numeric_error: [<ExceptionDecl ["Numeric_Error"] __standard:117:3-117:32>]
    pkg: [<PackageDecl ["Pkg"] pkg.ads:1:1-3:9>]
    positive: [<SubtypeDecl ["Positive"] __standard:6:3-6:57>]
    program_error: [<ExceptionDecl ["Program_Error"] __standard:118:3-118:32>]
    short_float: [<TypeDecl ["Short_Float"] __standard:12:3-13:51>]
    short_integer: [<TypeDecl ["Short_Integer"] __standard:8:3-8:69>]
    short_short_integer: [<TypeDecl ["Short_Short_Integer"] __standard:7:3-7:67>]
    storage_error: [<ExceptionDecl ["Storage_Error"] __standard:119:3-119:32>]
    string: [<TypeDecl ["String"] __standard:105:3-105:57>]
    tasking_error: [<ExceptionDecl ["Tasking_Error"] __standard:120:3-120:32>]
    true: [<EnumLiteralDecl ["True"] __standard:3:27-3:31>]
    universal_int_type_: [<TypeDecl ["Universal_Int_Type_"] __standard:121:3-121:45>]
    universal_real_type_: [<TypeDecl ["Universal_Real_Type_"] __standard:122:3-122:42>]
    wide_character: [<TypeDecl ["Wide_Character"] __standard:22:3-22:32>]
    wide_string: [<TypeDecl ["Wide_String"] __standard:107:3-108:39>]
    wide_wide_character: [<TypeDecl ["Wide_Wide_Character"] __standard:23:3-23:37>]
    wide_wide_string: [<TypeDecl ["Wide_Wide_String"] __standard:109:3-110:44>]

$root = LexEnv(Static_Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] __standard:1:1-123:14>]

@4 = LexEnv(Static_Primary, Parent=@2, Node=<NullSubpDecl ["P2"] pkg-child.ads:2:4-2:25>):
  Referenced: <NullSubpDecl ["P2"] pkg-child.ads:2:4-2:25>: LexEnv(Static_Primary, Node=<CompilationUnit pkg-child.ads:1:1-3:15>)
  Referenced: <NullSubpDecl ["P2"] pkg-child.ads:2:4-2:25>: LexEnv(Static_Primary, Node=<CompilationUnit pkg-child.ads:1:1-3:15>)
    <empty>

=====================
== Reloading Child ==
=====================
## Pkg ##
$root = LexEnv(Static_Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] __standard:1:1-123:14>]

@2 = LexEnv(Static_Primary, Parent=@1, Node=<PackageDecl ["Pkg"] pkg.ads:1:1-3:9>):
    child: [<PackageDecl ["Pkg.Child"] pkg-child.ads:1:1-3:15>]
    p1: [<NullSubpDecl ["P1"] pkg.ads:2:4-2:25>]

@1 = LexEnv(Static_Primary, Parent=$root, Node=<PackageDecl ["Standard"] __standard:1:1-123:14>):
    'a': [<EnumLiteralDecl ["'A'"] __standard:21:22-21:25>, <EnumLiteralDecl ["'A'"] __standard:22:27-22:30>, <EnumLiteralDecl ["'A'"] __standard:23:32-23:35>]
    ascii: [<PackageDecl ["ASCII"] __standard:24:3-104:13>]
    boolean: [<TypeDecl ["Boolean"] __standard:3:3-3:33>]
    character: [<TypeDecl ["Character"] __standard:21:3-21:27>]
    constraint_error: [<ExceptionDecl ["Constraint_Error"] __standard:116:3-116:32>]
    duration: [<TypeDecl ["Duration"] __standard:112:3-114:42>]
    false: [<EnumLiteralDecl ["False"] __standard:3:20-3:25>]
    float: [<TypeDecl ["Float"] __standard:14:3-15:51>]
    integer: [<TypeDecl ["Integer"] __standard:4:3-4:54>]
    long_float: [<TypeDecl ["Long_Float"] __standard:16:3-17:73>]
    long_integer: [<TypeDecl ["Long_Integer"] __standard:9:3-9:69>]
    long_long_float: [<TypeDecl ["Long_Long_Float"] __standard:18:3-20:33>]
    long_long_integer: [<TypeDecl ["Long_Long_Integer"] __standard:10:3-10:69>]
    long_long_long_integer: [<TypeDecl ["Long_Long_Long_Integer"] __standard:11:3-11:71>]
    natural: [<SubtypeDecl ["Natural"] __standard:5:3-5:57>]
    numeric_error: [<ExceptionDecl ["Numeric_Error"] __standard:117:3-117:32>]
    pkg: [<PackageDecl ["Pkg"] pkg.ads:1:1-3:9>]
    positive: [<SubtypeDecl ["Positive"] __standard:6:3-6:57>]
    program_error: [<ExceptionDecl ["Program_Error"] __standard:118:3-118:32>]
    short_float: [<TypeDecl ["Short_Float"] __standard:12:3-13:51>]
    short_integer: [<TypeDecl ["Short_Integer"] __standard:8:3-8:69>]
    short_short_integer: [<TypeDecl ["Short_Short_Integer"] __standard:7:3-7:67>]
    storage_error: [<ExceptionDecl ["Storage_Error"] __standard:119:3-119:32>]
    string: [<TypeDecl ["String"] __standard:105:3-105:57>]
    tasking_error: [<ExceptionDecl ["Tasking_Error"] __standard:120:3-120:32>]
    true: [<EnumLiteralDecl ["True"] __standard:3:27-3:31>]
    universal_int_type_: [<TypeDecl ["Universal_Int_Type_"] __standard:121:3-121:45>]
    universal_real_type_: [<TypeDecl ["Universal_Real_Type_"] __standard:122:3-122:42>]
    wide_character: [<TypeDecl ["Wide_Character"] __standard:22:3-22:32>]
    wide_string: [<TypeDecl ["Wide_String"] __standard:107:3-108:39>]
    wide_wide_character: [<TypeDecl ["Wide_Wide_Character"] __standard:23:3-23:37>]
    wide_wide_string: [<TypeDecl ["Wide_Wide_String"] __standard:109:3-110:44>]

$root = LexEnv(Static_Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] __standard:1:1-123:14>]

@3 = LexEnv(Static_Primary, Parent=@2, Node=<NullSubpDecl ["P1"] pkg.ads:2:4-2:25>):
  Referenced: <NullSubpDecl ["P1"] pkg.ads:2:4-2:25>: LexEnv(Static_Primary, Node=<CompilationUnit pkg.ads:1:1-3:9>)
  Referenced: <NullSubpDecl ["P1"] pkg.ads:2:4-2:25>: LexEnv(Static_Primary, Node=<CompilationUnit pkg.ads:1:1-3:9>)
    <empty>

## Child ##
$root = LexEnv(Static_Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] __standard:1:1-123:14>]

@2 = LexEnv(Static_Primary, Parent=@1, Node=<PackageDecl ["Pkg.Child"] pkg-child.ads:1:1-3:15>):
    p2: [<NullSubpDecl ["P2"] pkg-child.ads:2:4-2:25>]

@1 = LexEnv(Static_Primary, Parent=@3, Node=<PackageDecl ["Pkg"] pkg.ads:1:1-3:9>):
    child: [<PackageDecl ["Pkg.Child"] pkg-child.ads:1:1-3:15>]
    p1: [<NullSubpDecl ["P1"] pkg.ads:2:4-2:25>]

@3 = LexEnv(Static_Primary, Parent=$root, Node=<PackageDecl ["Standard"] __standard:1:1-123:14>):
    'a': [<EnumLiteralDecl ["'A'"] __standard:21:22-21:25>, <EnumLiteralDecl ["'A'"] __standard:22:27-22:30>, <EnumLiteralDecl ["'A'"] __standard:23:32-23:35>]
    ascii: [<PackageDecl ["ASCII"] __standard:24:3-104:13>]
    boolean: [<TypeDecl ["Boolean"] __standard:3:3-3:33>]
    character: [<TypeDecl ["Character"] __standard:21:3-21:27>]
    constraint_error: [<ExceptionDecl ["Constraint_Error"] __standard:116:3-116:32>]
    duration: [<TypeDecl ["Duration"] __standard:112:3-114:42>]
    false: [<EnumLiteralDecl ["False"] __standard:3:20-3:25>]
    float: [<TypeDecl ["Float"] __standard:14:3-15:51>]
    integer: [<TypeDecl ["Integer"] __standard:4:3-4:54>]
    long_float: [<TypeDecl ["Long_Float"] __standard:16:3-17:73>]
    long_integer: [<TypeDecl ["Long_Integer"] __standard:9:3-9:69>]
    long_long_float: [<TypeDecl ["Long_Long_Float"] __standard:18:3-20:33>]
    long_long_integer: [<TypeDecl ["Long_Long_Integer"] __standard:10:3-10:69>]
    long_long_long_integer: [<TypeDecl ["Long_Long_Long_Integer"] __standard:11:3-11:71>]
    natural: [<SubtypeDecl ["Natural"] __standard:5:3-5:57>]
    numeric_error: [<ExceptionDecl ["Numeric_Error"] __standard:117:3-117:32>]
    pkg: [<PackageDecl ["Pkg"] pkg.ads:1:1-3:9>]
    positive: [<SubtypeDecl ["Positive"] __standard:6:3-6:57>]
    program_error: [<ExceptionDecl ["Program_Error"] __standard:118:3-118:32>]
    short_float: [<TypeDecl ["Short_Float"] __standard:12:3-13:51>]
    short_integer: [<TypeDecl ["Short_Integer"] __standard:8:3-8:69>]
    short_short_integer: [<TypeDecl ["Short_Short_Integer"] __standard:7:3-7:67>]
    storage_error: [<ExceptionDecl ["Storage_Error"] __standard:119:3-119:32>]
    string: [<TypeDecl ["String"] __standard:105:3-105:57>]
    tasking_error: [<ExceptionDecl ["Tasking_Error"] __standard:120:3-120:32>]
    true: [<EnumLiteralDecl ["True"] __standard:3:27-3:31>]
    universal_int_type_: [<TypeDecl ["Universal_Int_Type_"] __standard:121:3-121:45>]
    universal_real_type_: [<TypeDecl ["Universal_Real_Type_"] __standard:122:3-122:42>]
    wide_character: [<TypeDecl ["Wide_Character"] __standard:22:3-22:32>]
    wide_string: [<TypeDecl ["Wide_String"] __standard:107:3-108:39>]
    wide_wide_character: [<TypeDecl ["Wide_Wide_Character"] __standard:23:3-23:37>]
    wide_wide_string: [<TypeDecl ["Wide_Wide_String"] __standard:109:3-110:44>]

$root = LexEnv(Static_Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] __standard:1:1-123:14>]

@4 = LexEnv(Static_Primary, Parent=@2, Node=<NullSubpDecl ["P2"] pkg-child.ads:2:4-2:25>):
  Referenced: <NullSubpDecl ["P2"] pkg-child.ads:2:4-2:25>: LexEnv(Static_Primary, Node=<CompilationUnit pkg-child.ads:1:1-3:15>)
  Referenced: <NullSubpDecl ["P2"] pkg-child.ads:2:4-2:25>: LexEnv(Static_Primary, Node=<CompilationUnit pkg-child.ads:1:1-3:15>)
    <empty>

Done.
