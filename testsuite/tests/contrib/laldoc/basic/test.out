Generating rst
==============

Unknown annotation: unknown-annotation
default entity handling for base.ads:<SingleTaskDecl ["T"] base.ads:35:4-35:11>
WARNING: Non handled entity: <SingleTaskDecl ["T"] base.ads:35:4-35:11>

Output
======

Base
----

.. ada:set_package:: Base


.. ada:type:: type A
    :package: Base

    :component Standard.Integer B:
        B field

    B field

    .. ada:procedure:: procedure Barize (Self : A)
        :package: Base

        Barize :ada:ref:`Self`
        We can also use the :ref:ada:``Self`` syntax.

    .. ada:procedure:: procedure Init_A
        :package: Base


    .. ada:object:: No_A : constant A
        :package: Base

        :objtype: Base.A
        :defval: ``(B => 12)``

        This is a null constant for :ada:ref:`A`

.. ada:procedure:: procedure Init
    :package: Base

    This is the global initialization procedure

.. ada:object:: Random_Integer_Constant : constant Integer
    :package: Base

    :objtype: Standard.Integer
    :defval: ``12``

    This is a random integer constant

.. ada:object:: Renaming_Object : Integer renames Random_Integer_Constant
    :package: Base

    :objtype: Standard.Integer
    :renames: Random_Integer_Constant

    Renaming object

.. ada:object:: No_Default_Val : access Integer
    :package: Base

    :objtype: ``access Integer``



    Not handled yet, will cause "not handled" warnings


.. ada:package:: Base.Nested


    Nested package declaration with doc before


.. ada:generic_package:: Base.P



    :Formals:
        .. ada:type:: type T
            :package: Base.P


            Documentation for generic formal

.. ada:procedure:: procedure Proc_With_Documented_Params (A : Integer; -- Doc for param ``A`` B : Float -- Doc for param ``B`` )
    :package: Base
:param Standard.Float B:


.. ada:type:: type Disc_Private
    :package: Base

    :discriminant Standard.Boolean K:
        Doc for ``K``

    Doc for ``K``

.. ada:exception:: My_Exception
    :package: Base

    My exception type

.. ada:generic-package-instantiation:: package P_Inst is new P
    :package: Base

    .. code-block:: ada

        package P_Inst is new P (Integer);

    :instpkg: Base.P

    Instantiation of :ada:ref:`P`


.. ada:package:: Base.P


    Instantiation of :ada:ref:`P`

    .. ada:type:: type T
        :package: Base.P

        :component Standard.Integer F:
        :component Standard.Integer G:


    .. ada:type:: type U
        :package: Base.P


        Private type that will make `p_shapes` crash, see TA20-019

