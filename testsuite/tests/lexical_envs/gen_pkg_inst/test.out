CompilationUnit[1:1-10:10]
|f_prelude:
|  AdaNodeList[1:1-1:1]: <empty list>
|f_body:
|  LibraryItem[1:1-10:10]
|  |f_has_private:
|  |  PrivateAbsent[1:1-1:1]
|  |f_item:
|  |  SubpBody[1:1-10:10]
|  |  |f_overriding:
|  |  |  OverridingUnspecified[1:1-1:1]
|  |  |f_subp_spec:
|  |  |  SubpSpec[1:1-1:15]
|  |  |  |f_subp_kind:
|  |  |  |  SubpKindProcedure[1:1-1:10]
|  |  |  |f_subp_name:
|  |  |  |  DefiningName[1:11-1:15]
|  |  |  |  |f_name:
|  |  |  |  |  Id[1:11-1:15]: Test
|  |  |  |f_subp_params: <null>
|  |  |  |f_subp_returns: <null>
|  |  |f_aspects: <null>
|  |  |f_decls:
|  |  |  DeclarativePart[1:18-8:1]
|  |  |  |f_decls:
|  |  |  |  AdaNodeList[2:4-7:38]
|  |  |  |  |  GenericPackageDecl[2:4-5:10]
|  |  |  |  |  |f_formal_part:
|  |  |  |  |  |  GenericFormalPart[2:4-3:19]
|  |  |  |  |  |  |f_decls:
|  |  |  |  |  |  |  AdaNodeList[3:7-3:19]
|  |  |  |  |  |  |  |  GenericFormalObjDecl[3:7-3:19]
|  |  |  |  |  |  |  |  |f_decl:
|  |  |  |  |  |  |  |  |  ObjectDecl[3:7-3:19]
|  |  |  |  |  |  |  |  |  |f_ids:
|  |  |  |  |  |  |  |  |  |  DefiningNameList[3:7-3:8]
|  |  |  |  |  |  |  |  |  |  |  DefiningName[3:7-3:8]
|  |  |  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  |  |  Id[3:7-3:8]: T
|  |  |  |  |  |  |  |  |  |f_has_aliased:
|  |  |  |  |  |  |  |  |  |  AliasedAbsent[3:10-3:10]
|  |  |  |  |  |  |  |  |  |f_has_constant:
|  |  |  |  |  |  |  |  |  |  ConstantAbsent[3:10-3:10]
|  |  |  |  |  |  |  |  |  |f_mode:
|  |  |  |  |  |  |  |  |  |  ModeDefault[3:10-3:10]
|  |  |  |  |  |  |  |  |  |f_type_expr:
|  |  |  |  |  |  |  |  |  |  SubtypeIndication[3:11-3:18]
|  |  |  |  |  |  |  |  |  |  |f_has_not_null:
|  |  |  |  |  |  |  |  |  |  |  NotNullAbsent[3:10-3:10]
|  |  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  |  Id[3:11-3:18]: Integer
|  |  |  |  |  |  |  |  |  |  |f_constraint: <null>
|  |  |  |  |  |  |  |  |  |f_default_expr: <null>
|  |  |  |  |  |  |  |  |  |f_renaming_clause: <null>
|  |  |  |  |  |  |  |  |  |f_aspects: <null>
|  |  |  |  |  |f_package_decl:
|  |  |  |  |  |  GenericPackageInternal[4:4-5:10]
|  |  |  |  |  |  |f_package_name:
|  |  |  |  |  |  |  DefiningName[4:12-4:13]
|  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  Id[4:12-4:13]: D
|  |  |  |  |  |  |f_aspects: <null>
|  |  |  |  |  |  |f_public_part:
|  |  |  |  |  |  |  PublicPart[4:16-5:4]
|  |  |  |  |  |  |  |f_decls:
|  |  |  |  |  |  |  |  AdaNodeList[4:16-4:16]: <empty list>
|  |  |  |  |  |  |f_private_part: <null>
|  |  |  |  |  |  |f_end_name:
|  |  |  |  |  |  |  EndName[5:8-5:9]
|  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  Id[5:8-5:9]: D
|  |  |  |  |  GenericPackageInstantiation[7:4-7:38]
|  |  |  |  |  |f_name:
|  |  |  |  |  |  DefiningName[7:12-7:18]
|  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  Id[7:12-7:18]: D_Inst
|  |  |  |  |  |f_generic_pkg_name:
|  |  |  |  |  |  Id[7:26-7:27]: D
|  |  |  |  |  |f_params:
|  |  |  |  |  |  AssocList[7:29-7:36]
|  |  |  |  |  |  |  ParamAssoc[7:29-7:36]
|  |  |  |  |  |  |  |f_designator:
|  |  |  |  |  |  |  |  Id[7:29-7:30]: T
|  |  |  |  |  |  |  |f_r_expr:
|  |  |  |  |  |  |  |  Int[7:34-7:36]: 12
|  |  |  |  |  |f_aspects: <null>
|  |  |f_stmts:
|  |  |  HandledStmts[8:6-10:1]
|  |  |  |f_stmts:
|  |  |  |  StmtList[9:4-9:9]
|  |  |  |  |  NullStmt[9:4-9:9]
|  |  |  |f_exceptions:
|  |  |  |  AdaNodeList[9:9-9:9]: <empty list>
|  |  |f_end_name:
|  |  |  EndName[10:5-10:9]
|  |  |  |f_name:
|  |  |  |  Id[10:5-10:9]: Test
|f_pragmas:
|  PragmaNodeList[10:10-10:10]: <empty list>

==== Dumping lexical environments ====
$root = LexEnv(Static_Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] in Standard>]

@2 = LexEnv(Static_Primary, Parent=@1, Node=<SubpBody ["Test"] test.adb:1:1-10:10>):
  Referenced: <SubpBody ["Test"] test.adb:1:1-10:10>: LexEnv(Static_Primary, Node=<CompilationUnit test.adb:1:1-10:10>)
  Referenced: <SubpBody ["Test"] test.adb:1:1-10:10>: LexEnv(Static_Primary, Node=<CompilationUnit test.adb:1:1-10:10>)
    d: [<GenericPackageDecl ["D"] test.adb:2:4-5:10>]
    d_inst: [<GenericPackageInstantiation ["D_Inst"] test.adb:7:4-7:38>]

@1 = LexEnv(Static_Primary, Parent=$root, Node=<PackageDecl ["Standard"] in Standard>):
    "&": [<SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>]
    "*": [<SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>]
    "**": [<SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>]
    "+": [<SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>]
    "-": [<SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>]
    "/": [<SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>]
    "/=": [<SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>]
    "<": [<SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>]
    "<=": [<SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>]
    "=": [<SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>]
    ">": [<SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>]
    ">=": [<SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>]
    "abs": [<SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>]
    "and": [<SyntheticSubpDecl [""and""] in Standard>, <SyntheticSubpDecl [""and""] in Standard>, <SyntheticSubpDecl [""and""] in Standard>, <SyntheticSubpDecl [""and""] in Standard>]
    "mod": [<SyntheticSubpDecl [""mod""] in Standard>, <SyntheticSubpDecl [""mod""] in Standard>, <SyntheticSubpDecl [""mod""] in Standard>, <SyntheticSubpDecl [""mod""] in Standard>, <SyntheticSubpDecl [""mod""] in Standard>, <SyntheticSubpDecl [""mod""] in Standard>]
    "not": [<SyntheticSubpDecl [""not""] in Standard>, <SyntheticSubpDecl [""not""] in Standard>, <SyntheticSubpDecl [""not""] in Standard>, <SyntheticSubpDecl [""not""] in Standard>]
    "or": [<SyntheticSubpDecl [""or""] in Standard>, <SyntheticSubpDecl [""or""] in Standard>, <SyntheticSubpDecl [""or""] in Standard>, <SyntheticSubpDecl [""or""] in Standard>]
    "rem": [<SyntheticSubpDecl [""rem""] in Standard>, <SyntheticSubpDecl [""rem""] in Standard>, <SyntheticSubpDecl [""rem""] in Standard>, <SyntheticSubpDecl [""rem""] in Standard>, <SyntheticSubpDecl [""rem""] in Standard>, <SyntheticSubpDecl [""rem""] in Standard>]
    "xor": [<SyntheticSubpDecl [""xor""] in Standard>, <SyntheticSubpDecl [""xor""] in Standard>, <SyntheticSubpDecl [""xor""] in Standard>, <SyntheticSubpDecl [""xor""] in Standard>]
    'A': [<EnumLiteralDecl ["'A'"] in Standard>, <EnumLiteralDecl ["'A'"] in Standard>, <EnumLiteralDecl ["'A'"] in Standard>]
    abort_signal_: [<ExceptionDecl ["Abort_Signal_"] in Standard>]
    ascii: [<PackageDecl ["ASCII"] in Standard>]
    boolean: [<ConcreteTypeDecl ["Boolean"] in Standard>]
    character: [<ConcreteTypeDecl ["Character"] in Standard>]
    constraint_error: [<ExceptionDecl ["Constraint_Error"] in Standard>]
    duration: [<ConcreteTypeDecl ["Duration"] in Standard>]
    false: [<EnumLiteralDecl ["False"] in Standard>]
    float: [<ConcreteTypeDecl ["Float"] in Standard>]
    integer: [<ConcreteTypeDecl ["Integer"] in Standard>]
    long_float: [<ConcreteTypeDecl ["Long_Float"] in Standard>]
    long_integer: [<ConcreteTypeDecl ["Long_Integer"] in Standard>]
    long_long_float: [<ConcreteTypeDecl ["Long_Long_Float"] in Standard>]
    long_long_integer: [<ConcreteTypeDecl ["Long_Long_Integer"] in Standard>]
    long_long_long_integer: [<ConcreteTypeDecl ["Long_Long_Long_Integer"] in Standard>]
    natural: [<SubtypeDecl ["Natural"] in Standard>]
    numeric_error: [<ExceptionDecl ["Numeric_Error"] in Standard>]
    positive: [<SubtypeDecl ["Positive"] in Standard>]
    program_error: [<ExceptionDecl ["Program_Error"] in Standard>]
    root_types_: [<PackageDecl ["root_types_"] in Standard>]
    short_float: [<ConcreteTypeDecl ["Short_Float"] in Standard>]
    short_integer: [<ConcreteTypeDecl ["Short_Integer"] in Standard>]
    short_short_integer: [<ConcreteTypeDecl ["Short_Short_Integer"] in Standard>]
    storage_error: [<ExceptionDecl ["Storage_Error"] in Standard>]
    string: [<ConcreteTypeDecl ["String"] in Standard>]
    tasking_error: [<ExceptionDecl ["Tasking_Error"] in Standard>]
    test: [<SubpBody ["Test"] test.adb:1:1-10:10>]
    true: [<EnumLiteralDecl ["True"] in Standard>]
    universal_fixed_type_: [<ConcreteTypeDecl ["Universal_Fixed_Type_"] in Standard>]
    universal_int_type_: [<ConcreteTypeDecl ["Universal_Int_Type_"] in Standard>]
    universal_real_type_: [<ConcreteTypeDecl ["Universal_Real_Type_"] in Standard>]
    wide_character: [<ConcreteTypeDecl ["Wide_Character"] in Standard>]
    wide_string: [<ConcreteTypeDecl ["Wide_String"] in Standard>]
    wide_wide_character: [<ConcreteTypeDecl ["Wide_Wide_Character"] in Standard>]
    wide_wide_string: [<ConcreteTypeDecl ["Wide_Wide_String"] in Standard>]

$root = LexEnv(Static_Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] in Standard>]

@3 = LexEnv(Static_Primary, Parent=@2, Node=<GenericPackageDecl ["D"] test.adb:2:4-5:10>):
    t: [<ObjectDecl ["T"] test.adb:3:7-3:19>]

@4 = LexEnv(Static_Primary, Parent=@3, Node=<GenericPackageInternal ["D"] test.adb:4:4-5:10>):
    <empty>

@5 = LexEnv(Static_Primary, Parent=@2, Node=<GenericPackageInstantiation ["D_Inst"] test.adb:7:4-7:38>):
    <empty>

