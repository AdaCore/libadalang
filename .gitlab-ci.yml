workflow:
  rules:
    # To avoid running too many pipelines, restrict the times we run one:

    # Run "trigger" pipelines
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'

    # Run pipelines triggered by a merge request creation/update
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

    # Run for pushes to a branch *except* if there is also a merge request for
    # it.
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'


variables:
  UPSTREAM_PROJECT : eng/libadalang/langkit
  UPSTREAM_PACKAGE_NAME: langkit.tar.gz
  UPSTREAM_PACKAGE: $CI_PROJECT_DIR/$UPSTREAM_PACKAGE_NAME

  PACKAGE_REPOSITORY_PROJECT: eng/libadalang/ci-packages

  CI_FRAGMENTS: ci_fragments
  CI_FRAGMENTS_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/setton/$CI_FRAGMENTS
  CI_FRAGMENTS_PATH: /tmp/$CI_FRAGMENTS

stages:
  - single


build_and_test:
  # This job works with the latest package containing the upstream project
  rules:
    # Do not trigger it from branches that start with "sync/": these are tested
    # from the Langkit CI.
    - if: $CI_COMMIT_BRANCH =~ /^sync\//
      when: never
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^sync\//
      when: never
    # This shouldn't trigger from the upstream
    - if: $CI_PIPELINE_SOURCE != "pipeline"
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: single
  script:
    - export PATH=/it/e3/bin:$PATH
    - . ~/.aws_container_credentials

    # Download the langkit package
    - (cd /tmp ; git clone $CI_FRAGMENTS_GIT)
    - GITLAB_TOKEN=$GITLAB_RW_TOKEN $CI_FRAGMENTS_PATH/download_generic_package $PACKAGE_REPOSITORY_PROJECT $UPSTREAM_PACKAGE_NAME
    - tar zxf $UPSTREAM_PACKAGE -C /
    - rm $UPSTREAM_PACKAGE

    # Build
    - cd /it/wave
    - mkdir -p fingerprints
    - anod vcs --add-repo libadalang $CI_PROJECT_DIR
    - touch fingerprints/x86_64-linux.langkit_support.install.json.assume-unchanged
    - touch fingerprints/x86_64-linux.langkit.install.json.assume-unchanged
    - anod build --minimal libadalang
    # Protect us against the potential build failure of libadalang-doc this day
    - anod install --latest libadalang-doc
    - anod build --minimal libadalang_for_customers

    # Run the testsuite
    - anod test --minimal libadalang

    # Produce a XUnit report for GitLab
    - e3-testsuite-report
        --failure-exit-code 1
        --xunit-output $CI_PROJECT_DIR/xunit_output.xml
        --xunit-name Libadalang
        x86_64-linux/libadalang-test/results/new/;

  artifacts:
    when: always
    paths:
      - xunit_output.xml
    reports:
      junit: xunit_output.xml


continuous_builder:
  # This job is meant to be run only after all updates on the "master" branch.
  # Its purpose is to check that recent work in Libadalang/Langkit/AdaSAT does
  # not break the build of GNAT. In this context, we are only interested in
  # builds: we think that a situation where LAL changes do not break builds but
  # create serious regressions at runtime are very unlikely, and running
  # relevant testing is very costly.
  #
  # Important: this job must be synchronized with the equivalent ones in the
  # Libadalang, Langkit and AdaSAT repositories.
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: single
  variables:
    ANOD_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/it/anod
    ADASAT_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/libadalang/adasat
    LANGKIT_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/libadalang/langkit
    LIBADALANG_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/libadalang/libadalang
    AWS_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/toolchain/aws
    GPR2_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/gpr/gpr
    TEMPLATES_PARSER_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/toolchain/templates-parser
  script:
    - export PATH=/it/e3/bin:$PATH
    - . ~/.aws_container_credentials

    # Get up-to-date sources for the continuous build: anod specs, LAL
    # repositories and unstabilized projects using LAL.
    - cd /tmp
    - git clone --depth 1 $ANOD_GIT
    - git clone --depth 1 $ADASAT_GIT
    - git clone --depth 1 $LANGKIT_GIT
    - git clone --depth 1 $LIBADALANG_GIT
    - git clone --depth 1 $AWS_GIT
    - git clone --depth 1 $GPR2_GIT
    - git clone --depth 1 $TEMPLATES_PARSER_GIT

    # Make the sandbox use these sources over nightly source packages
    - cd /it/wave
    - anod tune --anod-dir /tmp/anod
    - anod vcs --add-repo adasat /tmp/adasat
    - anod vcs --add-repo langkit /tmp/langkit
    - anod vcs --add-repo libadalang /tmp/libadalang
    - anod vcs --add-repo aws /tmp/aws
    - anod vcs --add-repo gpr2 /tmp/gpr
    - anod vcs --add-repo templates_parser /tmp/templates-parser

    # By default, the anod resolved installs dependencies, so we must manually
    # trigger intermediate builds each time. For instance: build adasat so that
    # the build of langkit_support does not install it.

    # Run builds for...

    # ... the Libadalang (internal lib) closure
    - anod build adasat
    - anod build langkit_support
    - anod build langkit
    - anod build libgpr2 -Qbare,edge
    - anod build libadalang

    # ... the Libadalang (for customers) closure
    - anod build libadalang-doc
    - anod build libadalang_for_customers

    # ... the AWS closure
    - anod build aws-lib
    - anod build aws-tools
    - anod build aws

    # ... build the GPR2 closure
    - anod build gpr2name
    - anod build libgpr2 -Qbare
    - anod build gpr2
