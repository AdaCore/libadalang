Analyzing test.adb
##################

Resolving xrefs for node <AssignStmt test.adb:6:4-6:25>
*******************************************************

Expr: <Id "X" test.adb:6:4-6:5>
  references:    test().x
  type:          ada.strings.unbounded.unbounded_string
  expected type: None
Expr: <ConcatOp test.adb:6:9-6:24>
  type:          ada.strings.unbounded.unbounded_string
  expected type: ada.strings.unbounded.unbounded_string
Expr: <Id "X" test.adb:6:9-6:10>
  references:    test().x
  type:          ada.strings.unbounded.unbounded_string
  expected type: ada.strings.unbounded.unbounded_string
Expr: <ConcatOperand test.adb:6:11-6:24>
  type:          ada.strings.unbounded.unbounded_string
  expected type: ada.strings.unbounded.unbounded_string
Expr: <OpConcat "&" test.adb:6:11-6:12>
  references:    ada.strings.unbounded."&"((ada.strings.unbounded.unbounded_string, ada.strings.unbounded.unbounded_string) -> ada.strings.unbounded.unbounded_string)
  type:          None
  expected type: None
Expr: <CallExpr test.adb:6:13-6:24>
  references:    ada.strings.unbounded.head((ada.strings.unbounded.unbounded_string, standard.natural, standard.character) -> ada.strings.unbounded.unbounded_string)
  type:          ada.strings.unbounded.unbounded_string
  expected type: ada.strings.unbounded.unbounded_string
Expr: <Id "Head" test.adb:6:13-6:17>
  references:    ada.strings.unbounded.head((ada.strings.unbounded.unbounded_string, standard.natural, standard.character) -> ada.strings.unbounded.unbounded_string)
  type:          ada.strings.unbounded.unbounded_string
  expected type: None
Expr: <Id "Y" test.adb:6:19-6:20>
  references:    test().y
  type:          ada.strings.unbounded.unbounded_string
  expected type: ada.strings.unbounded.unbounded_string
Expr: <Int test.adb:6:22-6:23>
  references:    None
  type:          standard.universal_int_type_
  expected type: standard.natural


Done.
