# This bit is used to make sure we don't run too many pipelines:
# run on a triggered pipeline, on a merge request, or on a push to a branch,
# but do not run in reaction to a push to a branch if there is also
# a merge request for it.
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'


variables:
  UPSTREAM_PROJECT : eng/libadalang/langkit
  UPSTREAM_PACKAGE_NAME: langkit.tar.gz
  UPSTREAM_PACKAGE: $CI_PROJECT_DIR/$UPSTREAM_PACKAGE_NAME

  PACKAGE_REPOSITORY_PROJECT: eng/libadalang/ci-packages

  CI_FRAGMENTS: ci_fragments
  CI_FRAGMENTS_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/setton/$CI_FRAGMENTS
  CI_FRAGMENTS_PATH: /tmp/$CI_FRAGMENTS

stages:
  - build_and_test


build_and_test:
  # This job works with the latest package containing the upstream project
  rules:
    # Do not trigger it from branches that start with "sync/": these are tested
    # from the Langkit CI.
    - if: $CI_COMMIT_BRANCH =~ /^sync\//
      when: never
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^sync\//
      when: never
    # This shouldn't trigger from the upstream
    - if: $CI_PIPELINE_SOURCE != "pipeline"
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: build_and_test
  script:
    - export PATH=/it/e3/bin:$PATH
    - . ~/.aws_container_credentials

    # Download the langkit package
    - (cd /tmp ; git clone $CI_FRAGMENTS_GIT)
    - GITLAB_TOKEN=$GITLAB_RW_TOKEN $CI_FRAGMENTS_PATH/download_generic_package $PACKAGE_REPOSITORY_PROJECT $UPSTREAM_PACKAGE_NAME
    - tar zxf $UPSTREAM_PACKAGE -C /
    - rm $UPSTREAM_PACKAGE

    # Build
    - cd /it/wave
    - mkdir -p fingerprints
    - anod vcs --add-repo libadalang $CI_PROJECT_DIR
    - touch fingerprints/x86_64-linux.langkit_support.install.json.assume-unchanged
    - touch fingerprints/x86_64-linux.langkit.install.json.assume-unchanged
    - anod build --minimal libadalang
    - anod build --minimal libadalang_for_customers

    # Run the testsuite
    - anod test --minimal libadalang

    # Produce a XUnit report for GitLab
    - e3-testsuite-report
        --failure-exit-code 1
        --xunit-output $CI_PROJECT_DIR/xunit_output.xml
        --xunit-name Libadalang
        x86_64-linux/libadalang-test/results/new/;

  artifacts:
    when: always
    paths:
      - xunit_output.xml
    reports:
      junit: xunit_output.xml
