CompilationUnit[1:1-10:10]
|prelude:
|  AdaNodeList[1:1-1:1]: <empty list>
|body:
|  LibraryItem[1:1-10:10]
|  |has_private:
|  |  PrivateAbsent[1:1-1:1]
|  |item:
|  |  SubpBody[1:1-10:10]
|  |  |overriding:
|  |  |  OverridingUnspecified[1:1-1:1]
|  |  |subp_spec:
|  |  |  SubpSpec[1:1-1:15]
|  |  |  |subp_kind:
|  |  |  |  SubpKindProcedure[1:1-1:10]
|  |  |  |subp_name:
|  |  |  |  Id[1:11-1:15]: Test
|  |  |  |subp_params: <null>
|  |  |  |subp_returns: <null>
|  |  |aspects: <null>
|  |  |decls:
|  |  |  DeclarativePart[1:18-8:1]
|  |  |  |decls:
|  |  |  |  AdaNodeList[2:4-7:38]
|  |  |  |  |  GenericPackageDecl[2:4-5:10]
|  |  |  |  |  |formal_part:
|  |  |  |  |  |  GenericFormalPart[2:4-3:19]
|  |  |  |  |  |  |decls:
|  |  |  |  |  |  |  AdaNodeList[3:7-3:19]
|  |  |  |  |  |  |  |  GenericFormalObjDecl[3:7-3:19]
|  |  |  |  |  |  |  |  |decl:
|  |  |  |  |  |  |  |  |  ObjectDecl[3:7-3:19]
|  |  |  |  |  |  |  |  |  |ids:
|  |  |  |  |  |  |  |  |  |  IdentifierList[3:7-3:8]
|  |  |  |  |  |  |  |  |  |  |  Id[3:7-3:8]: T
|  |  |  |  |  |  |  |  |  |has_aliased:
|  |  |  |  |  |  |  |  |  |  AliasedAbsent[3:10-3:10]
|  |  |  |  |  |  |  |  |  |has_constant:
|  |  |  |  |  |  |  |  |  |  ConstantAbsent[3:10-3:10]
|  |  |  |  |  |  |  |  |  |mode:
|  |  |  |  |  |  |  |  |  |  ModeDefault[3:10-3:10]
|  |  |  |  |  |  |  |  |  |type_expr:
|  |  |  |  |  |  |  |  |  |  SubtypeIndication[3:11-3:18]
|  |  |  |  |  |  |  |  |  |  |has_not_null:
|  |  |  |  |  |  |  |  |  |  |  NotNullAbsent[3:10-3:10]
|  |  |  |  |  |  |  |  |  |  |name:
|  |  |  |  |  |  |  |  |  |  |  Id[3:11-3:18]: Integer
|  |  |  |  |  |  |  |  |  |  |constraint: <null>
|  |  |  |  |  |  |  |  |  |default_expr: <null>
|  |  |  |  |  |  |  |  |  |renaming_clause: <null>
|  |  |  |  |  |  |  |  |  |aspects: <null>
|  |  |  |  |  |package_decl:
|  |  |  |  |  |  GenericPackageInternal[4:4-5:10]
|  |  |  |  |  |  |package_name:
|  |  |  |  |  |  |  Id[4:12-4:13]: D
|  |  |  |  |  |  |aspects: <null>
|  |  |  |  |  |  |public_part:
|  |  |  |  |  |  |  PublicPart[4:16-5:4]
|  |  |  |  |  |  |  |decls:
|  |  |  |  |  |  |  |  AdaNodeList[4:16-4:16]: <empty list>
|  |  |  |  |  |  |private_part: <null>
|  |  |  |  |  |  |end_name:
|  |  |  |  |  |  |  Id[5:8-5:9]: D
|  |  |  |  |  GenericPackageInstantiation[7:4-7:38]
|  |  |  |  |  |name:
|  |  |  |  |  |  Id[7:12-7:18]: D_Inst
|  |  |  |  |  |generic_pkg_name:
|  |  |  |  |  |  Id[7:26-7:27]: D
|  |  |  |  |  |params:
|  |  |  |  |  |  AssocList[7:29-7:36]
|  |  |  |  |  |  |  ParamAssoc[7:29-7:36]
|  |  |  |  |  |  |  |designator:
|  |  |  |  |  |  |  |  Id[7:29-7:30]: T
|  |  |  |  |  |  |  |r_expr:
|  |  |  |  |  |  |  |  Int[7:34-7:36]: 12
|  |  |  |  |  |aspects: <null>
|  |  |stmts:
|  |  |  HandledStmts[8:6-10:1]
|  |  |  |stmts:
|  |  |  |  StmtList[9:4-9:9]
|  |  |  |  |  NullStmt[9:4-9:9]
|  |  |  |exceptions:
|  |  |  |  AdaNodeList[9:8-9:8]: <empty list>
|  |  |end_name:
|  |  |  Id[10:5-10:9]: Test
|pragmas:
|  PragmaNodeList[10:10-10:10]: <empty list>

==== Dumping lexical environments ====
@1 = LexEnv(Primary, Parent=$root, Node=<PackageDecl ["Standard"] 1:1-121:14>):
    'a': [<EnumLiteralDecl ["'A'"] 20:22-20:25>, <EnumLiteralDecl ["'A'"] 21:27-21:30>, <EnumLiteralDecl ["'A'"] 22:32-22:35>]
    ascii: [<PackageDecl ["ASCII"] 23:3-103:13>]
    boolean: [<TypeDecl ["Boolean"] 3:3-3:33>]
    character: [<TypeDecl ["Character"] 20:3-20:27>]
    constraint_error: [<ExceptionDecl ["Constraint_Error"] 115:3-115:32>]
    duration: [<TypeDecl ["Duration"] 111:3-113:42>]
    false: [<EnumLiteralDecl ["False"] 3:20-3:25>]
    float: [<TypeDecl ["Float"] 13:3-14:51>]
    integer: [<TypeDecl ["Integer"] 4:3-4:54>]
    long_float: [<TypeDecl ["Long_Float"] 15:3-16:73>]
    long_integer: [<TypeDecl ["Long_Integer"] 9:3-9:66>]
    long_long_float: [<TypeDecl ["Long_Long_Float"] 17:3-19:33>]
    long_long_integer: [<TypeDecl ["Long_Long_Integer"] 10:3-10:66>]
    natural: [<SubtypeDecl ["Natural"] 5:3-5:57>]
    positive: [<SubtypeDecl ["Positive"] 6:3-6:57>]
    program_error: [<ExceptionDecl ["Program_Error"] 116:3-116:32>]
    short_float: [<TypeDecl ["Short_Float"] 11:3-12:51>]
    short_integer: [<TypeDecl ["Short_Integer"] 8:3-8:66>]
    short_short_integer: [<TypeDecl ["Short_Short_Integer"] 7:3-7:64>]
    storage_error: [<ExceptionDecl ["Storage_Error"] 117:3-117:32>]
    string: [<TypeDecl ["String"] 104:3-104:57>]
    tasking_error: [<ExceptionDecl ["Tasking_Error"] 118:3-118:32>]
    test: [<SubpBody ["Test"] 1:1-10:10>]
    true: [<EnumLiteralDecl ["True"] 3:27-3:31>]
    universal_int_type_: [<TypeDecl ["Universal_Int_Type_"] 119:3-119:45>]
    universal_real_type_: [<TypeDecl ["Universal_Real_Type_"] 120:3-120:42>]
    wide_character: [<TypeDecl ["Wide_Character"] 21:3-21:32>]
    wide_string: [<TypeDecl ["Wide_String"] 106:3-107:39>]
    wide_wide_character: [<TypeDecl ["Wide_Wide_Character"] 22:3-22:37>]
    wide_wide_string: [<TypeDecl ["Wide_Wide_String"] 108:3-109:44>]

$root = LexEnv(Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] 1:1-121:14>]

@2 = LexEnv(Primary, Parent=@1, Node=<SubpBody ["Test"] 1:1-10:10>):
    d: [<GenericPackageDecl ["D"] 2:4-5:10>]
    d_inst: [<GenericPackageInstantiation ["D_Inst"] 7:4-7:38>]

@3 = LexEnv(Primary, Parent=@2, Node=<GenericPackageDecl ["D"] 2:4-5:10>):
    t: [<ObjectDecl ["T"] 3:7-3:19>]

@4 = LexEnv(Primary, Parent=@3, Node=<GenericPackageInternal ["D"] 4:4-5:10>):
    <empty>

@5 = LexEnv(Primary, Parent=@2, Node=<GenericPackageInstantiation ["D_Inst"] 7:4-7:38>):
    <empty>

