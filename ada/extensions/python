## vim: filetype=python

def token_match(self, other):
    """
    Helper for the finditer/find/findall methods, so that a token matches
    another token even if they are not strictly equivalent.
    """
    return self == other or self.text == other


def sloc_range_repr(self):
    """
    Better repr for sloc ranges.
    """
    return "<SlocRange {}:{}-{}:{}>".format(
        self.start.line, self.start.column, self.end.line, self.end.column
    )


def ada_node_repr(self):
    """
    Better repr for base ada nodes.
    """
    return "<{} {}>".format(self.__class__.__name__, self.sloc_range)


def identifier_repr(self):
    """
    Better repr for identifiers.
    """
    return '<{} "{}" {}>'.format(
        self.__class__.__name__, self.f_tok.text, self.sloc_range
    )


@property
def single_tok_node_text(self):
    """
    Return the text for any SingleTokNode.
    """
    return self.f_tok.text


@property
def full_name(n):
    """
    Return a nicely pretty printed name for any expr that is only formed of
    DottedName and Identifier instances.
    """
    if isinstance(n, lal.DottedName):
        return "{}.{}".format(n.f_prefix.full_name, n.f_suffix.full_name)
    elif isinstance(n, lal.Identifier):
        return n.text
    else:
        raise Exception("Wrong type for name: {}".format(type(n)))


def previous_sibling(node):
    """
    Return the node previous to node in node's parent's list of children.
    """
    last_item = None
    for sibling in node.parent:
        if sibling == node:
            return last_item
        last_item = sibling


def next_sibling(node):
    """
    Return the node next to node in node's parent's list of children.
    """
    return_next = False
    for sibling in node.parent:
        if return_next:
            return sibling
        if sibling == node:
            return_next = True


def basic_decl_repr(self):
    """
    Better repr for basic declarations.
    """
    return '<{} "{}" {}>'.format(
        self.__class__.__name__,
        [i.f_tok.text for i in self.p_defining_names],
        self.sloc_range
    )


AdaNode.__repr__ = ada_node_repr
SlocRange.__repr__ = sloc_range_repr
Token.match = token_match
Identifier.__repr__ = identifier_repr
SingleTokNode.text = single_tok_node_text
DottedName.full_name = full_name
Identifier.full_name = full_name
BasicDecl.__repr__ = basic_decl_repr
AdaNode.previous_sibling = previous_sibling
AdaNode.next_sibling = next_sibling
