variables:
   # The Python virtualenv directory
   VENV_DIR: $CI_PROJECT_DIR/venv

   # Where we store alire, the alire config, and the toolchain
   # packages pulled by Alire (gnat, gprbuild)
   ALIRE_DIR: $CI_PROJECT_DIR/alire

   # Where the dependencies and langkit is installed
   PREFIX: $CI_PROJECT_DIR/prefix

   # The dependency .gprs live here
   GPR_PROJECT_PATH: $CI_PROJECT_DIR/prefix/share/gpr

stages:
  - setup
  - build
  - test

# These define "macros" used below

.use_python_env: &python_env
   - source $VENV_DIR/bin/activate

.use_gnat_env: &gnat_env
   - |
     for dep in `ls $ALIRE_DIR/cache/dependencies/` ; do
        export PATH=$ALIRE_DIR/cache/dependencies/$dep/bin/:$PATH
     done

.use_langkit_env: &langkit_env
   - *python_env
   - *gnat_env

.venv_cache: &venv_cache
   key: lal_venv
   paths:
     - $VENV_DIR

.alire_cache: &alire_cache
   key: lal_alire
   paths:
      - alire

.deps_checkouts_cache: &deps_checkouts_cache
   key: lal_deps_checkouts
   paths:
     - xmlada
     - gprbuild
     - gnatcoll-core
     - gnatcoll-bindings
     - langkit


.lal_caches: &lal_caches
   - *venv_cache
   - *alire_cache
   - *deps_checkouts_cache
   - key: lal_build_artifacts
     paths:
        - $PREFIX
        - build

#########
# setup #
#########

# Setup Python and the Python virtualenv
setup-python:
   stage: setup
   script:
    - |
      if [ ! -e $VENV_DIR ]; then
         echo "setting up a virtual env in $VENV_DIR"
         mkdir $VENV_DIR
         python3 -m venv $VENV_DIR
         source $VENV_DIR/bin/activate
         pip3 install -r REQUIREMENTS.dev
         pip3 install jsonschema
      fi
   cache: *venv_cache

# Setup the gnat toolchain, and gprbuild, using alire
setup-gnat:
   stage: setup
   script:
     - |
       if [ ! -e alire ]; then
          mkdir alire
          cd alire
          wget -q https://github.com/alire-project/alire/releases/download/v1.1.2/alr-1.1.2-bin-x86_64-linux.zip
          unzip alr-1.1.2-bin-x86_64-linux.zip
          ./bin/alr -c $ALIRE_DIR toolchain --install gnat_native=11.2.3
          ./bin/alr -c $ALIRE_DIR toolchain --install gprbuild=22.0.1
       fi
   cache: *alire_cache

# Grab source dependencies from GitLab and GitHub
setup-dependency-checkouts:
   stage: setup
   script:
     - |
       for dep in xmlada gprbuild gnatcoll-core gnatcoll-bindings ; do
          if [ -e $dep ]; then
             (cd $dep ; git pull --rebase)
          else
             git clone https://github.com/AdaCore/$dep
          fi
       done

     - |
       langkit_url="https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/libadalang/langkit"
       if [ -e langkit ]; then
          (
            cd langkit
            git remote set-url origin "$langkit_url"
            git pull --rebase
          )
       else
          git clone "$langkit_url"
       fi
   cache: *deps_checkouts_cache

#########
# build #
#########

build-job:
   stage: build
   before_script:
      # Source the env
      - *langkit_env
      # Checks
      - gnatls -v
   dependencies:
      - setup-python
      - setup-gnat
   script:
      # Build Langkit dependencies
      - |
            (cd xmlada ; ./configure --prefix=$PREFIX && make && make install)
            make -C gprbuild prefix=$PREFIX libgpr.build libgpr.install
            make -C gnatcoll-core prefix=$PREFIX ENABLE_SHARED=yes build install
            python gnatcoll-bindings/iconv/setup.py build -j0 \
                --prefix=$PREFIX --library-types=static,relocatable
            python gnatcoll-bindings/iconv/setup.py install
            python gnatcoll-bindings/gmp/setup.py build -j0 \
                --prefix=$PREFIX --library-types=static,relocatable
            python gnatcoll-bindings/gmp/setup.py install

      # Build+install Langkit
      - |
            pip install ./langkit
            langkit/manage.py make --no-mypy

      # Build Libadalang
      - |
            eval `langkit/manage.py setenv`
            ./manage.py make

   cache: *lal_caches

########
# test #
########

test:
   stage: test
   before_script: *langkit_env
   dependencies:
      - setup-python
      - build-job
   script: |
      eval `langkit/manage.py setenv`
      ./manage.py test \
        --disable-ocaml \
        --failure-exit-code=1 \
        --no-has-put-image

   cache: *lal_caches
