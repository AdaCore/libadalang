CompilationUnit[1:1-11:9]
|f_prelude:
|  AdaNodeList[1:1-1:1]: <empty list>
|f_body:
|  LibraryItem[1:1-11:9]
|  |f_has_private:
|  |  PrivateAbsent[1:1-1:1]
|  |f_item:
|  |  PackageDecl[1:1-11:9]
|  |  |f_package_name:
|  |  |  DefiningName[1:9-1:12]
|  |  |  |f_name:
|  |  |  |  Id[1:9-1:12]: Foo
|  |  |f_aspects: <null>
|  |  |f_public_part:
|  |  |  PublicPart[1:15-11:1]
|  |  |  |f_decls:
|  |  |  |  AdaNodeList[2:4-10:15]
|  |  |  |  |  ConcreteTypeDecl[2:4-5:15]
|  |  |  |  |  |f_name:
|  |  |  |  |  |  DefiningName[2:9-2:16]
|  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  Id[2:9-2:16]: R1_Type
|  |  |  |  |  |f_discriminants: <null>
|  |  |  |  |  |f_type_def:
|  |  |  |  |  |  RecordTypeDef[2:20-5:14]
|  |  |  |  |  |  |f_has_abstract:
|  |  |  |  |  |  |  AbstractAbsent[2:19-2:19]
|  |  |  |  |  |  |f_has_tagged:
|  |  |  |  |  |  |  TaggedAbsent[2:19-2:19]
|  |  |  |  |  |  |f_has_limited:
|  |  |  |  |  |  |  LimitedAbsent[2:19-2:19]
|  |  |  |  |  |  |f_record_def:
|  |  |  |  |  |  |  RecordDef[2:20-5:14]
|  |  |  |  |  |  |  |f_components:
|  |  |  |  |  |  |  |  ComponentList[3:7-4:22]
|  |  |  |  |  |  |  |  |f_components:
|  |  |  |  |  |  |  |  |  AdaNodeList[3:7-4:22]
|  |  |  |  |  |  |  |  |  |  ComponentDecl[3:7-3:22]
|  |  |  |  |  |  |  |  |  |  |f_ids:
|  |  |  |  |  |  |  |  |  |  |  DefiningNameList[3:7-3:11]
|  |  |  |  |  |  |  |  |  |  |  |  DefiningName[3:7-3:8]
|  |  |  |  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  |  |  |  Id[3:7-3:8]: A
|  |  |  |  |  |  |  |  |  |  |  |  DefiningName[3:10-3:11]
|  |  |  |  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  |  |  |  Id[3:10-3:11]: B
|  |  |  |  |  |  |  |  |  |  |f_component_def:
|  |  |  |  |  |  |  |  |  |  |  ComponentDef[3:14-3:21]
|  |  |  |  |  |  |  |  |  |  |  |f_has_aliased:
|  |  |  |  |  |  |  |  |  |  |  |  AliasedAbsent[3:13-3:13]
|  |  |  |  |  |  |  |  |  |  |  |f_has_constant:
|  |  |  |  |  |  |  |  |  |  |  |  ConstantAbsent[3:13-3:13]
|  |  |  |  |  |  |  |  |  |  |  |f_type_expr:
|  |  |  |  |  |  |  |  |  |  |  |  SubtypeIndication[3:14-3:21]
|  |  |  |  |  |  |  |  |  |  |  |  |f_has_not_null:
|  |  |  |  |  |  |  |  |  |  |  |  |  NotNullAbsent[3:13-3:13]
|  |  |  |  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  |  |  |  Id[3:14-3:21]: Integer
|  |  |  |  |  |  |  |  |  |  |  |  |f_constraint: <null>
|  |  |  |  |  |  |  |  |  |  |f_default_expr: <null>
|  |  |  |  |  |  |  |  |  |  |f_aspects: <null>
|  |  |  |  |  |  |  |  |  |  ComponentDecl[4:7-4:22]
|  |  |  |  |  |  |  |  |  |  |f_ids:
|  |  |  |  |  |  |  |  |  |  |  DefiningNameList[4:7-4:8]
|  |  |  |  |  |  |  |  |  |  |  |  DefiningName[4:7-4:8]
|  |  |  |  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  |  |  |  Id[4:7-4:8]: C
|  |  |  |  |  |  |  |  |  |  |f_component_def:
|  |  |  |  |  |  |  |  |  |  |  ComponentDef[4:14-4:21]
|  |  |  |  |  |  |  |  |  |  |  |f_has_aliased:
|  |  |  |  |  |  |  |  |  |  |  |  AliasedAbsent[4:13-4:13]
|  |  |  |  |  |  |  |  |  |  |  |f_has_constant:
|  |  |  |  |  |  |  |  |  |  |  |  ConstantAbsent[4:13-4:13]
|  |  |  |  |  |  |  |  |  |  |  |f_type_expr:
|  |  |  |  |  |  |  |  |  |  |  |  SubtypeIndication[4:14-4:21]
|  |  |  |  |  |  |  |  |  |  |  |  |f_has_not_null:
|  |  |  |  |  |  |  |  |  |  |  |  |  NotNullAbsent[4:13-4:13]
|  |  |  |  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  |  |  |  Id[4:14-4:21]: Natural
|  |  |  |  |  |  |  |  |  |  |  |  |f_constraint: <null>
|  |  |  |  |  |  |  |  |  |  |f_default_expr: <null>
|  |  |  |  |  |  |  |  |  |  |f_aspects: <null>
|  |  |  |  |  |  |  |  |f_variant_part: <null>
|  |  |  |  |  |f_aspects: <null>
|  |  |  |  |  ConcreteTypeDecl[7:4-10:15]
|  |  |  |  |  |f_name:
|  |  |  |  |  |  DefiningName[7:9-7:16]
|  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  Id[7:9-7:16]: R2_Type
|  |  |  |  |  |f_discriminants:
|  |  |  |  |  |  KnownDiscriminantPart[7:17-7:30]
|  |  |  |  |  |  |f_discr_specs:
|  |  |  |  |  |  |  DiscriminantSpecList[7:18-7:29]
|  |  |  |  |  |  |  |  DiscriminantSpec[7:18-7:29]
|  |  |  |  |  |  |  |  |f_ids:
|  |  |  |  |  |  |  |  |  DefiningNameList[7:18-7:19]
|  |  |  |  |  |  |  |  |  |  DefiningName[7:18-7:19]
|  |  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  |  Id[7:18-7:19]: N
|  |  |  |  |  |  |  |  |f_type_expr:
|  |  |  |  |  |  |  |  |  SubtypeIndication[7:22-7:29]
|  |  |  |  |  |  |  |  |  |f_has_not_null:
|  |  |  |  |  |  |  |  |  |  NotNullAbsent[7:21-7:21]
|  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  Id[7:22-7:29]: Natural
|  |  |  |  |  |  |  |  |  |f_constraint: <null>
|  |  |  |  |  |  |  |  |f_default_expr: <null>
|  |  |  |  |  |  |  |  |f_aspects: <null>
|  |  |  |  |  |f_type_def:
|  |  |  |  |  |  RecordTypeDef[7:34-10:14]
|  |  |  |  |  |  |f_has_abstract:
|  |  |  |  |  |  |  AbstractAbsent[7:33-7:33]
|  |  |  |  |  |  |f_has_tagged:
|  |  |  |  |  |  |  TaggedAbsent[7:33-7:33]
|  |  |  |  |  |  |f_has_limited:
|  |  |  |  |  |  |  LimitedAbsent[7:33-7:33]
|  |  |  |  |  |  |f_record_def:
|  |  |  |  |  |  |  RecordDef[7:34-10:14]
|  |  |  |  |  |  |  |f_components:
|  |  |  |  |  |  |  |  ComponentList[8:7-9:27]
|  |  |  |  |  |  |  |  |f_components:
|  |  |  |  |  |  |  |  |  AdaNodeList[8:7-9:27]
|  |  |  |  |  |  |  |  |  |  ComponentDecl[8:7-8:19]
|  |  |  |  |  |  |  |  |  |  |f_ids:
|  |  |  |  |  |  |  |  |  |  |  DefiningNameList[8:7-8:8]
|  |  |  |  |  |  |  |  |  |  |  |  DefiningName[8:7-8:8]
|  |  |  |  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  |  |  |  Id[8:7-8:8]: I
|  |  |  |  |  |  |  |  |  |  |f_component_def:
|  |  |  |  |  |  |  |  |  |  |  ComponentDef[8:11-8:18]
|  |  |  |  |  |  |  |  |  |  |  |f_has_aliased:
|  |  |  |  |  |  |  |  |  |  |  |  AliasedAbsent[8:10-8:10]
|  |  |  |  |  |  |  |  |  |  |  |f_has_constant:
|  |  |  |  |  |  |  |  |  |  |  |  ConstantAbsent[8:10-8:10]
|  |  |  |  |  |  |  |  |  |  |  |f_type_expr:
|  |  |  |  |  |  |  |  |  |  |  |  SubtypeIndication[8:11-8:18]
|  |  |  |  |  |  |  |  |  |  |  |  |f_has_not_null:
|  |  |  |  |  |  |  |  |  |  |  |  |  NotNullAbsent[8:10-8:10]
|  |  |  |  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  |  |  |  Id[8:11-8:18]: Integer
|  |  |  |  |  |  |  |  |  |  |  |  |f_constraint: <null>
|  |  |  |  |  |  |  |  |  |  |f_default_expr: <null>
|  |  |  |  |  |  |  |  |  |  |f_aspects: <null>
|  |  |  |  |  |  |  |  |  |  ComponentDecl[9:7-9:27]
|  |  |  |  |  |  |  |  |  |  |f_ids:
|  |  |  |  |  |  |  |  |  |  |  DefiningNameList[9:7-9:8]
|  |  |  |  |  |  |  |  |  |  |  |  DefiningName[9:7-9:8]
|  |  |  |  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  |  |  |  Id[9:7-9:8]: S
|  |  |  |  |  |  |  |  |  |  |f_component_def:
|  |  |  |  |  |  |  |  |  |  |  ComponentDef[9:11-9:26]
|  |  |  |  |  |  |  |  |  |  |  |f_has_aliased:
|  |  |  |  |  |  |  |  |  |  |  |  AliasedAbsent[9:10-9:10]
|  |  |  |  |  |  |  |  |  |  |  |f_has_constant:
|  |  |  |  |  |  |  |  |  |  |  |  ConstantAbsent[9:10-9:10]
|  |  |  |  |  |  |  |  |  |  |  |f_type_expr:
|  |  |  |  |  |  |  |  |  |  |  |  SubtypeIndication[9:11-9:26]
|  |  |  |  |  |  |  |  |  |  |  |  |f_has_not_null:
|  |  |  |  |  |  |  |  |  |  |  |  |  NotNullAbsent[9:10-9:10]
|  |  |  |  |  |  |  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  |  |  |  |  |  |  Id[9:11-9:17]: String
|  |  |  |  |  |  |  |  |  |  |  |  |f_constraint:
|  |  |  |  |  |  |  |  |  |  |  |  |  CompositeConstraint[9:18-9:26]
|  |  |  |  |  |  |  |  |  |  |  |  |  |f_constraints:
|  |  |  |  |  |  |  |  |  |  |  |  |  |  AssocList[9:19-9:25]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  CompositeConstraintAssoc[9:19-9:25]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |f_ids:
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  DiscriminantChoiceList[9:17-9:17]: <empty list>
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |f_constraint_expr:
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BinOp[9:19-9:25]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |f_left:
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Int[9:19-9:20]: 1
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |f_op:
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  OpDoubleDot[9:21-9:23]
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |f_right:
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Id[9:24-9:25]: N
|  |  |  |  |  |  |  |  |  |  |f_default_expr: <null>
|  |  |  |  |  |  |  |  |  |  |f_aspects: <null>
|  |  |  |  |  |  |  |  |f_variant_part: <null>
|  |  |  |  |  |f_aspects: <null>
|  |  |f_private_part: <null>
|  |  |f_end_name:
|  |  |  EndName[11:5-11:8]
|  |  |  |f_name:
|  |  |  |  Id[11:5-11:8]: Foo
|f_pragmas:
|  PragmaNodeList[11:9-11:9]: <empty list>

==== Dumping lexical environments ====
$root = LexEnv(Static_Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] in Standard>]

@2 = LexEnv(Static_Primary, Parent=@1, Node=<PackageDecl ["Foo"] input:1:1-11:9>):
    "/=": [<SyntheticSubpDecl [""/=""] input:2:20-5:14>, <SyntheticSubpDecl [""/=""] input:7:34-10:14>]
    "=": [<SyntheticSubpDecl [""=""] input:2:20-5:14>, <SyntheticSubpDecl [""=""] input:7:34-10:14>]
    r1_type: [<ConcreteTypeDecl ["R1_Type"] input:2:4-5:15>]
    r2_type: [<ConcreteTypeDecl ["R2_Type"] input:7:4-10:15>]

@1 = LexEnv(Static_Primary, Parent=$root, Node=<PackageDecl ["Standard"] in Standard>):
    "&": [<SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>, <SyntheticSubpDecl [""&""] in Standard>]
    "*": [<SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>, <SyntheticSubpDecl [""*""] in Standard>]
    "**": [<SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>, <SyntheticSubpDecl [""**""] in Standard>]
    "+": [<SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>, <SyntheticSubpDecl [""+""] in Standard>]
    "-": [<SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>, <SyntheticSubpDecl [""-""] in Standard>]
    "/": [<SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>, <SyntheticSubpDecl [""/""] in Standard>]
    "/=": [<SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>, <SyntheticSubpDecl [""/=""] in Standard>]
    "<": [<SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>, <SyntheticSubpDecl [""<""] in Standard>]
    "<=": [<SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>, <SyntheticSubpDecl [""<=""] in Standard>]
    "=": [<SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>, <SyntheticSubpDecl [""=""] in Standard>]
    ">": [<SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>, <SyntheticSubpDecl ["">""] in Standard>]
    ">=": [<SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>, <SyntheticSubpDecl ["">=""] in Standard>]
    "abs": [<SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>, <SyntheticSubpDecl [""abs""] in Standard>]
    "and": [<SyntheticSubpDecl [""and""] in Standard>, <SyntheticSubpDecl [""and""] in Standard>, <SyntheticSubpDecl [""and""] in Standard>, <SyntheticSubpDecl [""and""] in Standard>]
    "mod": [<SyntheticSubpDecl [""mod""] in Standard>, <SyntheticSubpDecl [""mod""] in Standard>, <SyntheticSubpDecl [""mod""] in Standard>, <SyntheticSubpDecl [""mod""] in Standard>, <SyntheticSubpDecl [""mod""] in Standard>, <SyntheticSubpDecl [""mod""] in Standard>]
    "not": [<SyntheticSubpDecl [""not""] in Standard>, <SyntheticSubpDecl [""not""] in Standard>, <SyntheticSubpDecl [""not""] in Standard>, <SyntheticSubpDecl [""not""] in Standard>]
    "or": [<SyntheticSubpDecl [""or""] in Standard>, <SyntheticSubpDecl [""or""] in Standard>, <SyntheticSubpDecl [""or""] in Standard>, <SyntheticSubpDecl [""or""] in Standard>]
    "rem": [<SyntheticSubpDecl [""rem""] in Standard>, <SyntheticSubpDecl [""rem""] in Standard>, <SyntheticSubpDecl [""rem""] in Standard>, <SyntheticSubpDecl [""rem""] in Standard>, <SyntheticSubpDecl [""rem""] in Standard>, <SyntheticSubpDecl [""rem""] in Standard>]
    "xor": [<SyntheticSubpDecl [""xor""] in Standard>, <SyntheticSubpDecl [""xor""] in Standard>, <SyntheticSubpDecl [""xor""] in Standard>, <SyntheticSubpDecl [""xor""] in Standard>]
    'A': [<EnumLiteralDecl ["'A'"] in Standard>, <EnumLiteralDecl ["'A'"] in Standard>, <EnumLiteralDecl ["'A'"] in Standard>]
    abort_signal_: [<ExceptionDecl ["Abort_Signal_"] in Standard>]
    ascii: [<PackageDecl ["ASCII"] in Standard>]
    boolean: [<ConcreteTypeDecl ["Boolean"] in Standard>]
    character: [<ConcreteTypeDecl ["Character"] in Standard>]
    constraint_error: [<ExceptionDecl ["Constraint_Error"] in Standard>]
    duration: [<ConcreteTypeDecl ["Duration"] in Standard>]
    false: [<EnumLiteralDecl ["False"] in Standard>]
    float: [<ConcreteTypeDecl ["Float"] in Standard>]
    foo: [<PackageDecl ["Foo"] input:1:1-11:9>]
    integer: [<ConcreteTypeDecl ["Integer"] in Standard>]
    long_float: [<ConcreteTypeDecl ["Long_Float"] in Standard>]
    long_integer: [<ConcreteTypeDecl ["Long_Integer"] in Standard>]
    long_long_float: [<ConcreteTypeDecl ["Long_Long_Float"] in Standard>]
    long_long_integer: [<ConcreteTypeDecl ["Long_Long_Integer"] in Standard>]
    long_long_long_integer: [<ConcreteTypeDecl ["Long_Long_Long_Integer"] in Standard>]
    natural: [<SubtypeDecl ["Natural"] in Standard>]
    numeric_error: [<ExceptionDecl ["Numeric_Error"] in Standard>]
    positive: [<SubtypeDecl ["Positive"] in Standard>]
    program_error: [<ExceptionDecl ["Program_Error"] in Standard>]
    root_types_: [<PackageDecl ["root_types_"] in Standard>]
    short_float: [<ConcreteTypeDecl ["Short_Float"] in Standard>]
    short_integer: [<ConcreteTypeDecl ["Short_Integer"] in Standard>]
    short_short_integer: [<ConcreteTypeDecl ["Short_Short_Integer"] in Standard>]
    storage_error: [<ExceptionDecl ["Storage_Error"] in Standard>]
    string: [<ConcreteTypeDecl ["String"] in Standard>]
    tasking_error: [<ExceptionDecl ["Tasking_Error"] in Standard>]
    true: [<EnumLiteralDecl ["True"] in Standard>]
    universal_fixed_type_: [<ConcreteTypeDecl ["Universal_Fixed_Type_"] in Standard>]
    universal_int_type_: [<ConcreteTypeDecl ["Universal_Int_Type_"] in Standard>]
    universal_real_type_: [<ConcreteTypeDecl ["Universal_Real_Type_"] in Standard>]
    wide_character: [<ConcreteTypeDecl ["Wide_Character"] in Standard>]
    wide_string: [<ConcreteTypeDecl ["Wide_String"] in Standard>]
    wide_wide_character: [<ConcreteTypeDecl ["Wide_Wide_Character"] in Standard>]
    wide_wide_string: [<ConcreteTypeDecl ["Wide_Wide_String"] in Standard>]

$root = LexEnv(Static_Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] in Standard>]

@3 = LexEnv(Static_Primary, Parent=@2, Node=<ConcreteTypeDecl ["R1_Type"] input:2:4-5:15>):
    a: [<ComponentDecl ["A", "B"] input:3:7-3:22>]
    b: [<ComponentDecl ["A", "B"] input:3:7-3:22>]
    c: [<ComponentDecl ["C"] input:4:7-4:22>]
    r1_type: [<SyntheticObjectDecl ["R1_Type"] input:2:4-5:15>]

@4 = LexEnv(Static_Primary, Parent=@2, Node=<ConcreteTypeDecl ["R2_Type"] input:7:4-10:15>):
    i: [<ComponentDecl ["I"] input:8:7-8:19>]
    n: [<DiscriminantSpec ["N"] input:7:18-7:29>]
    r2_type: [<SyntheticObjectDecl ["R2_Type"] input:7:4-10:15>]
    s: [<ComponentDecl ["S"] input:9:7-9:27>]

