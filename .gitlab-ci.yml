# This bit is used to make sure we don't run too many pipelines:
# run on a triggered pipeline, on a merge request, or on a push to a branch,
# but do not run in reaction to a push to a branch if there is also
# a merge request for it.
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'


variables:
  UPSTREAM_PROJECT : eng/libadalang/langkit
  UPSTREAM_PACKAGE_NAME: langkit.tar.gz
  UPSTREAM_PACKAGE: $CI_PROJECT_DIR/$UPSTREAM_PACKAGE_NAME

  PACKAGE: $CI_PROJECT_DIR/libadalang.tar.gz
  PACKAGE_REPOSITORY_PROJECT: eng/libadalang/ci-packages

  CI_FRAGMENTS: ci_fragments
  CI_FRAGMENTS_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/setton/$CI_FRAGMENTS
  CI_FRAGMENTS_PATH: /tmp/$CI_FRAGMENTS

stages:
  - build
  - test


# There are two ways to test this project: either
#   - triggered as part of a multi-project pipeline, with langkit as
#     the upstream project, in which case the langkit package is
#     passed as an artefact, or
#   - standalone, in which case we use the latest langkit package

####################
# STANDALONE BUILD #
####################


build_standalone:
  # This job works with the latest package containing
  # the upstream project.
  rules:
    # We not trigger it from branches that start
    # with "sync/": these will be triggered by a pipeline only.
    - if: $CI_COMMIT_BRANCH =~ /^sync\//
      when: never
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^sync\//
      when: never
    # This shouldn't trigger from the upstream
    - if: $CI_PIPELINE_SOURCE != "pipeline"
  services:
     - image:libadalang
     - cpu:8
     - mem:16
  stage: build
  script:
    - export PATH=/it/e3/bin:$PATH

    # Download the langkit package.
    - (cd /tmp ; git clone $CI_FRAGMENTS_GIT)
    - GITLAB_TOKEN=$GITLAB_RW_TOKEN $CI_FRAGMENTS_PATH/download_generic_package $PACKAGE_REPOSITORY_PROJECT $UPSTREAM_PACKAGE_NAME
    - tar zxf $UPSTREAM_PACKAGE -C /
    - rm $UPSTREAM_PACKAGE

    # Build
    - cd /it/wave
    - anod vcs --add-repo libadalang $CI_PROJECT_DIR
    - anod build --minimal --disable-cathod libadalang

    # Create the package.
    - tar czf $PACKAGE -C / it/wave/x86_64-linux/libadalang/install

  artifacts:
    paths:
      - $PACKAGE


###################
# STANDALONE TEST #
###################


test_standalone:
  # This job works with the latest package containing
  # the upstream project.
  rules:
    # We not trigger it from branches that start
    # with "sync/": these will be triggered by a pipeline only.
    - if: $CI_COMMIT_BRANCH =~ /^sync\//
      when: never
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^sync\//
      when: never
    # This shouldn't trigger from the upstream
    - if: $CI_PIPELINE_SOURCE != "pipeline"
  services:
     - image:libadalang
     - cpu:8
     - mem:16
  stage: test
  script:
    - export PATH=/it/e3/bin:$PATH

    # Download the langkit package.
    - (cd /tmp ; git clone $CI_FRAGMENTS_GIT)
    - GITLAB_TOKEN=$GITLAB_RW_TOKEN $CI_FRAGMENTS_PATH/download_generic_package $PACKAGE_REPOSITORY_PROJECT $UPSTREAM_PACKAGE_NAME
    - tar zxf $UPSTREAM_PACKAGE -C /
    - rm $UPSTREAM_PACKAGE

    # Get the libadalang that we built in the previous step
    - tar zxf $PACKAGE -C /
    - rm $PACKAGE

    # Run the testsuite
    - cd /it/wave
    - anod vcs --add-repo libadalang $CI_PROJECT_DIR
    - touch fingerprints/x86_64-linux.libadalang.build.json.assume-unchanged
    - anod test --minimal --disable-cathod libadalang

    # Report the results
    - e3-testsuite-report --failure-exit-code 1 --xunit-output xunit_output.xml x86_64-linux/libadalang-test/results/new/
    - cp xunit_output.xml $CI_PROJECT_DIR

  artifacts:
    when: always
    paths:
      - xunit_output.xml
    reports:
      junit: xunit_output.xml

##########################
# BUILD AND TEST TRIGGER #
##########################

build_and_test_trigger:
  # This job is triggered from an upstream pipeline
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
  services:
     - image:libadalang
     - cpu:8
     - mem:16
  stage: test
  script:
    - export PATH=/it/e3/bin:$PATH

    # If the upstream is on a "sync" branch, checkout the same
    # "sync" branch on this repo.
    - if [ `echo $ARTIFACTS_DOWNLOAD_REF | grep -e "^sync/"` ]; then
          git fetch;
          git checkout $ARTIFACTS_DOWNLOAD_REF;
      fi

    # The upstream package is the artifact for this pipeline.
    - tar zxf $UPSTREAM_PACKAGE -C /
    - rm $UPSTREAM_PACKAGE

    # Build and test
    - cd /it/wave
    - anod vcs --add-repo libadalang $CI_PROJECT_DIR
    - anod build --minimal --disable-cathod libadalang
    - anod test --minimal --disable-cathod libadalang
    - e3-testsuite-report --failure-exit-code 1 --xunit-output xunit_output.xml x86_64-linux/libadalang-test/results/new/
    - cp xunit_output.xml $CI_PROJECT_DIR

  needs:
    # The upstream project
    - project: $UPSTREAM_PROJECT
      job: langkit_build
      ref: $ARTIFACTS_DOWNLOAD_REF
      artifacts: true
