// -*- C++ -*-
header {
#include <stdlib.h>  /* for: atoi() */
}

token {
    IDENTIFIER;
    ABORT; ELSE; NEW; RETURN; ABS; ELSIF; NOT; REVERSE; ABSTRACT; END; NULL;
    ACCEPT; ENTRY; SELECT; ACCESS; EXCEPTION; OF; SEPARATE; ALIASED; EXIT; OR;
    SOME; ALL; OTHERS; SUBTYPE; AND; FOR; OUT; SYNCHRONIZED; ARRAY; FUNCTION;
    OVERRIDING; AT; TAGGED; GENERIC; PACKAGE; TASK; BEGIN; GOTO; PRAGMA;
    TERMINATE; BODY; PRIVATE; THEN; IF; PROCEDURE; TYPE; CASE; IN; PROTECTED;
    CONSTANT; INTERFACE; IS; RAISE; USE; DECLARE; RANGE; DELAY; LIMITED;
    RECORD; WHEN; DELTA; LOOP; REM; WHILE; DIGITS; RENAMES; WITH; DO; MOD;
    REQUEUE; XOR; NUMBER;

    PAR_OPEN; PAR_CLOSE; SEMICOLON; COLON; COMMA; DOUBLEDOT; DOT; DIAMOND; LTE;
    GTE; ARROW; EQUAL; LT; GT; PLUS; MINUS; POWER; MULT; AMP; NOTEQUAL; DIVIDE;
    TICK; PIPE;
}

mode ONE_AND_ONLY
{
    <<EOF>>     => QUEX_TKN_TERMINATION;

    [ \t\r\n]+  { }
    "abort" => QUEX_TKN_ABORT; 
    "else" => QUEX_TKN_ELSE;
    "new" => QUEX_TKN_NEW;
    "return" => QUEX_TKN_RETURN;
    "abs" => QUEX_TKN_ABS;
    "elsif" => QUEX_TKN_ELSIF;
    "not" => QUEX_TKN_NOT;
    "reverse" => QUEX_TKN_REVERSE;
    "abstract" => QUEX_TKN_ABSTRACT;
    "end" => QUEX_TKN_END;
    "null" => QUEX_TKN_NULL;
    "accept" => QUEX_TKN_ACCEPT;
    "entry" => QUEX_TKN_ENTRY;
    "select" => QUEX_TKN_SELECT;
    "access" => QUEX_TKN_ACCESS;
    "exception" => QUEX_TKN_EXCEPTION;
    "of" => QUEX_TKN_OF;
    "separate" => QUEX_TKN_SEPARATE;
    "aliased" => QUEX_TKN_ALIASED;
    "exit" => QUEX_TKN_EXIT;
    "or" => QUEX_TKN_OR;
    "some" => QUEX_TKN_SOME;
    "all" => QUEX_TKN_ALL;
    "others" => QUEX_TKN_OTHERS;
    "subtype" => QUEX_TKN_SUBTYPE;
    "and" => QUEX_TKN_AND;
    "for" => QUEX_TKN_FOR;
    "out" => QUEX_TKN_OUT;
    "synchronized" => QUEX_TKN_SYNCHRONIZED;
    "array" => QUEX_TKN_ARRAY;
    "function" => QUEX_TKN_FUNCTION;
    "overriding" => QUEX_TKN_OVERRIDING;
    "at" => QUEX_TKN_AT;
    "tagged" => QUEX_TKN_TAGGED;
    "generic" => QUEX_TKN_GENERIC;
    "package" => QUEX_TKN_PACKAGE;
    "task" => QUEX_TKN_TASK;
    "begin" => QUEX_TKN_BEGIN;
    "goto" => QUEX_TKN_GOTO;
    "pragma" => QUEX_TKN_PRAGMA;
    "terminate" => QUEX_TKN_TERMINATE;
    "body" => QUEX_TKN_BODY;
    "private" => QUEX_TKN_PRIVATE;
    "then" => QUEX_TKN_THEN;
    "if" => QUEX_TKN_IF;
    "procedure" => QUEX_TKN_PROCEDURE;
    "type" => QUEX_TKN_TYPE;
    "case" => QUEX_TKN_CASE;
    "in" => QUEX_TKN_IN;
    "protected" => QUEX_TKN_PROTECTED;
    "constant" => QUEX_TKN_CONSTANT;
    "interface" => QUEX_TKN_INTERFACE;
    "is" => QUEX_TKN_IS;
    "raise" => QUEX_TKN_RAISE;
    "use" => QUEX_TKN_USE;
    "declare" => QUEX_TKN_DECLARE;
    "range" => QUEX_TKN_RANGE;
    "delay" => QUEX_TKN_DELAY;
    "limited" => QUEX_TKN_LIMITED;
    "record" => QUEX_TKN_RECORD;
    "when" => QUEX_TKN_WHEN;
    "delta" => QUEX_TKN_DELTA;
    "loop" => QUEX_TKN_LOOP;
    "rem" => QUEX_TKN_REM;
    "while" => QUEX_TKN_WHILE;
    "digits" => QUEX_TKN_DIGITS;
    "renames" => QUEX_TKN_RENAMES;
    "with" => QUEX_TKN_WITH;
    "do" => QUEX_TKN_DO;
    "mod" => QUEX_TKN_MOD;
    "requeue" => QUEX_TKN_REQUEUE;
    "xor" => QUEX_TKN_XOR;
    "number" => QUEX_TKN_NUMBER;

    "(" => QUEX_TKN_PAR_OPEN(Lexeme);
    ")" => QUEX_TKN_PAR_CLOSE(Lexeme);
    ";" => QUEX_TKN_SEMICOLON(Lexeme); 
    ":" => QUEX_TKN_COLON(Lexeme); 
    "," => QUEX_TKN_COMMA(Lexeme); 
    ".." => QUEX_TKN_DOUBLEDOT(Lexeme); 
    "." => QUEX_TKN_DOT(Lexeme); 
    "<>" => QUEX_TKN_DIAMOND(Lexeme); 
    "<=" => QUEX_TKN_LTE(Lexeme);
    ">=" => QUEX_TKN_GTE(Lexeme); 
    "=>" => QUEX_TKN_ARROW(Lexeme); 
    "=" => QUEX_TKN_EQUAL(Lexeme); 
    "<" => QUEX_TKN_LT(Lexeme); 
    ">" => QUEX_TKN_GT(Lexeme); 
    "+" => QUEX_TKN_PLUS(Lexeme); 
    "-" => QUEX_TKN_MINUS(Lexeme); 
    "**" => QUEX_TKN_POWER(Lexeme); 
    "*" => QUEX_TKN_MULT(Lexeme); 
    "&" => QUEX_TKN_AMP(Lexeme); 
    "/=" => QUEX_TKN_NOTEQUAL(Lexeme); 
    "/" => QUEX_TKN_DIVIDE(Lexeme);
    "'" => QUEX_TKN_TICK(Lexeme); 
    "|" => QUEX_TKN_PIPE(Lexeme);

    [0-9]+      => QUEX_TKN_NUMBER(number=(size_t)atoi((char*)(Lexeme)));
    [_a-zA-Z]+  { self_send1(QUEX_TKN_IDENTIFIER, Lexeme); RETURN; }
}



