CompilationUnit[1:1-3:9]
|prelude:
|  AdaNodeList[1:1-1:1]: <empty list>
|body:
|  LibraryItem[1:1-3:9]
|  |has_private:
|  |  PrivateAbsent[1:1-1:1]
|  |item:
|  |  PackageDecl[1:1-3:9]
|  |  |package_name:
|  |  |  DefiningName[1:9-1:12]
|  |  |  |name:
|  |  |  |  Id[1:9-1:12]: Foo
|  |  |aspects: <null>
|  |  |public_part:
|  |  |  PublicPart[1:15-3:1]
|  |  |  |decls:
|  |  |  |  AdaNodeList[2:4-2:41]
|  |  |  |  |  SubtypeDecl[2:4-2:41]
|  |  |  |  |  |name:
|  |  |  |  |  |  DefiningName[2:12-2:15]
|  |  |  |  |  |  |name:
|  |  |  |  |  |  |  Id[2:12-2:15]: Lol
|  |  |  |  |  |subtype:
|  |  |  |  |  |  SubtypeIndication[2:19-2:40]
|  |  |  |  |  |  |has_not_null:
|  |  |  |  |  |  |  NotNullAbsent[2:18-2:18]
|  |  |  |  |  |  |name:
|  |  |  |  |  |  |  Id[2:19-2:26]: Integer
|  |  |  |  |  |  |constraint:
|  |  |  |  |  |  |  RangeConstraint[2:27-2:40]
|  |  |  |  |  |  |  |range:
|  |  |  |  |  |  |  |  RangeSpec[2:27-2:40]
|  |  |  |  |  |  |  |  |range:
|  |  |  |  |  |  |  |  |  BinOp[2:33-2:40]
|  |  |  |  |  |  |  |  |  |left:
|  |  |  |  |  |  |  |  |  |  Int[2:33-2:34]: 0
|  |  |  |  |  |  |  |  |  |op:
|  |  |  |  |  |  |  |  |  |  OpDoubleDot[2:35-2:37]
|  |  |  |  |  |  |  |  |  |right:
|  |  |  |  |  |  |  |  |  |  Int[2:38-2:40]: 10
|  |  |  |  |  |aspects: <null>
|  |  |private_part: <null>
|  |  |end_name:
|  |  |  EndName[3:5-3:8]
|  |  |  |name:
|  |  |  |  Id[3:5-3:8]: Foo
|pragmas:
|  PragmaNodeList[3:9-3:9]: <empty list>

==== Dumping lexical environments ====
@1 = LexEnv(Primary, Parent=$root, Node=<PackageDecl ["Standard"] __standard:1:1-121:14>):
    'a': [<EnumLiteralDecl ["'A'"] __standard:20:22-20:25>, <EnumLiteralDecl ["'A'"] __standard:21:27-21:30>, <EnumLiteralDecl ["'A'"] __standard:22:32-22:35>]
    ascii: [<PackageDecl ["ASCII"] __standard:23:3-103:13>]
    boolean: [<TypeDecl ["Boolean"] __standard:3:3-3:33>]
    character: [<TypeDecl ["Character"] __standard:20:3-20:27>]
    constraint_error: [<ExceptionDecl ["Constraint_Error"] __standard:115:3-115:32>]
    duration: [<TypeDecl ["Duration"] __standard:111:3-113:42>]
    false: [<EnumLiteralDecl ["False"] __standard:3:20-3:25>]
    float: [<TypeDecl ["Float"] __standard:13:3-14:51>]
    foo: [<PackageDecl ["Foo"] input:1:1-3:9>]
    integer: [<TypeDecl ["Integer"] __standard:4:3-4:54>]
    long_float: [<TypeDecl ["Long_Float"] __standard:15:3-16:73>]
    long_integer: [<TypeDecl ["Long_Integer"] __standard:9:3-9:66>]
    long_long_float: [<TypeDecl ["Long_Long_Float"] __standard:17:3-19:33>]
    long_long_integer: [<TypeDecl ["Long_Long_Integer"] __standard:10:3-10:66>]
    natural: [<SubtypeDecl ["Natural"] __standard:5:3-5:57>]
    positive: [<SubtypeDecl ["Positive"] __standard:6:3-6:57>]
    program_error: [<ExceptionDecl ["Program_Error"] __standard:116:3-116:32>]
    short_float: [<TypeDecl ["Short_Float"] __standard:11:3-12:51>]
    short_integer: [<TypeDecl ["Short_Integer"] __standard:8:3-8:66>]
    short_short_integer: [<TypeDecl ["Short_Short_Integer"] __standard:7:3-7:64>]
    storage_error: [<ExceptionDecl ["Storage_Error"] __standard:117:3-117:32>]
    string: [<TypeDecl ["String"] __standard:104:3-104:57>]
    tasking_error: [<ExceptionDecl ["Tasking_Error"] __standard:118:3-118:32>]
    true: [<EnumLiteralDecl ["True"] __standard:3:27-3:31>]
    universal_int_type_: [<TypeDecl ["Universal_Int_Type_"] __standard:119:3-119:45>]
    universal_real_type_: [<TypeDecl ["Universal_Real_Type_"] __standard:120:3-120:42>]
    wide_character: [<TypeDecl ["Wide_Character"] __standard:21:3-21:32>]
    wide_string: [<TypeDecl ["Wide_String"] __standard:106:3-107:39>]
    wide_wide_character: [<TypeDecl ["Wide_Wide_Character"] __standard:22:3-22:37>]
    wide_wide_string: [<TypeDecl ["Wide_Wide_String"] __standard:108:3-109:44>]

$root = LexEnv(Primary, Parent=null):
    standard: [<PackageDecl ["Standard"] __standard:1:1-121:14>]

@2 = LexEnv(Primary, Parent=@1, Node=<PackageDecl ["Foo"] input:1:1-3:9>):
    lol: [<SubtypeDecl ["Lol"] input:2:4-2:41>]

