Dependencies
------------

To generate and build the library itself:

- Quex version 0.64.8 - http://sourceforge.net/projects/quex/files/HISTORY/0.64/.
  Follow the installation guide in the quex README
- The mako template system for python
- Clang-format
- boost options

You will need GNATpython in order to run the testsuite.

To develop comfortably:

- If you want interactive debugging when code is generated, install IPython
- If you want to compute code coverage for the code generator, install
  coverage.py (pip install coverage)
- If you want to check memory issues, the testsuite has an option to track them
  using Valgrind.

To build the documentation:

- Sphinx
- Pygments

Building
--------

First, let's generate code for libadalang itself. In the top-level directory,
run:

$ python ada/manage.py generate

You can also pass a "-c" flag in order to get a code coverage report in the
"coverage" directory.

Then, let's build it:

$ python ada/manage.py build

If you satisfied all the above dependencies and if you did set QUEX_PATH and
the quex executable as said in quex's README, it should build fine.

Also, while developing libadalang you might be happy to use the

$ python ada/manage.py make

command, that will wrap the two previous commands in one, generating the code
and building it in one step

Install
-------

Once you built libadalang, you can install the library in any place you want:

$ python ada/manage.py install $INSTALL_DIR

Testing
-------

First, make sure you have the "build/bin" directory in your PATH so the
testcases can access the "parse" program. Then, in the top-level directory,
run:

$ python testsuite/testsuite.py

If you want to learn more about this test driver's options (for instance to run
tests under Valgrind), add a "-h" flag.

Because adding "build/bin" to the PATH is not very convenient, ada/manage.py
provides a shortcut to run the testsuite:

$ python ada/manage.py test

It runs the testsuite with the --enable-color option. It is also possible to
pass other arguments to testsuite.py. For instance, if you want to run under a
debugger only the abort_statement_0 testcase, execute:

$ python ada/manage.py test -- -g testsuite/tests/parser/abort_statement_0

Bootstrapping a new language engine
-----------------------------------

Nothing is more simple than getting an initial project skeleton to work on a
new language engine. Imagine you want to create an engine for the Foo language,
run:

$ python langkit/create-project.py Foo

And then have a look at the created "foo" directory: you have minimal
lexers and parsers and a "manage.py" script you can use to build this new
engine:

$ python foo/manage.py make

Here you are!

Documentation
-------------

The developer's documentation for the project is in doc/dev_guide. You can
consult it as a text files or you can build it.  For instance, to generate HTML
documents, run from the top directory:

$ make -C doc/dev_guide html

And then open the following file in your favorite browser:

    doc/dev_guide/_build/html/index.html

Developper tools
----------------

Langkit, the meta compiler, uses mako templates generating C++ code. This can
be hard to read. To ease development, a vim syntax file is available under
utils/makocpp.vim. Put it in your .vim/syntax directory to get automatic
highlighting of the template files.
