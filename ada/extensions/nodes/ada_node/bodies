--  vim: ft=ada

-------------------------
-- Ada_Node_P_Get_Unit --
--------------------------

function Ada_Node_P_Get_Unit
  (Node           : Bare_Ada_Node;
   Name           : Symbol_Type_Array_Access;
   Kind           : Analysis_Unit_Kind;
   Load_If_Needed : Boolean) return Internal_Unit is
begin
   return Libadalang.Env_Hooks.Fetch_Unit
     (Node.Unit.Context,
      Libadalang.Env_Hooks.Symbol_Type_Array (Name.Items),
      Node.Unit,
      Kind,
      Load_If_Needed);
exception
   when Property_Error =>
      return No_Analysis_Unit;
end Ada_Node_P_Get_Unit;

------------------------------
-- Ada_Node_P_Standard_Unit --
------------------------------

function Ada_Node_P_Standard_Unit (Node : Bare_Ada_Node) return Internal_Unit
is
begin
   return Get_From_File
     (Context  => Node.Unit.Context,
      Filename => "__standard",
      Charset  => "",
      Reparse  => False,
      Rule     => Default_Grammar_Rule);
end Ada_Node_P_Standard_Unit;

--------------------------------------
-- Ada_Node_P_Filter_Is_Imported_By --
--------------------------------------

function Ada_Node_P_Filter_Is_Imported_By
  (Node       : Bare_Ada_Node;
   Units      : Internal_Unit_Array_Access;
   Transitive : Boolean) return Internal_Unit_Array_Access is

   package Analysis_Unit_Vectors is new Ada.Containers.Vectors
     (Index_Type   => Positive,
      Element_Type => Internal_Unit);

   package Analysis_Unit_Maps is new Ada.Containers.Hashed_Maps
     (Key_Type        => Internal_Unit,
      Element_Type    => Boolean,
      Hash            => Hash,
      Equivalent_Keys => "=");

   type CU_Array is array (Positive range <>) of Bare_Compilation_Unit;

   Context : constant Internal_Context := Node.Unit.Context;

   Ada_Text_IO_Symbol_Array : constant Internal_Symbol_Type_Array :=
     (1 => Lookup_Symbol (Context, "ada"),
      2 => Lookup_Symbol (Context, "text_io"));

   Ada_Text_IO_Special_Packages : constant Internal_Symbol_Type_Array :=
     (Lookup_Symbol (Context, "integer_io"),
      Lookup_Symbol (Context, "modular_io"),
      Lookup_Symbol (Context, "float_io"),
      Lookup_Symbol (Context, "fixed_io"),
      Lookup_Symbol (Context, "decimal_io"),
      Lookup_Symbol (Context, "enumeration_io"));

   function Is_Special_Unit_Name
     (Symbols : Internal_Symbol_Type_Array) return Boolean;
   --  Return True iff the given name (as an array of symbols) matches
   --  the name of one of those special units:
   --  Ada.Text_IO.{Integer_IO, Modular_IO, Float_IO, Fixed_IO,
   --               Decimal_IO, Enumeration_IO}
   --  See `Actual_Target` to find out why these are considered special.

   function Actual_Target return Internal_Unit;
   --  There are special packages in the Ada runtime that are handled
   --  in an ad-hoc way by GNAT: they are viewed as nested packages of
   --  Ada.Text_IO by the users but are actually written as *child* packages
   --  of Ada.Text_IO.
   --  This procedure checks whether the given target is not one of those and
   --  if it is, it modifies the target so it points to the unit defining
   --  Ada.Text_IO instead, which allows the correct behavior of this whole
   --  routine.

   function All_Compilation_Units_From
     (Root : Bare_Ada_Node) return CU_Array;
   --  Given a node that is the root of an analysis unit, return all the
   --  compilation units that are defined inside of it.

   function Does_Import_Target (From : in Internal_Unit) return Boolean;
   --  Predicate that returns True iff the given unit imports the target.
   --  If Transitive is True, handle transitive imports.

   --------------------------
   -- Is_Special_Unit_Name --
   --------------------------

   function Is_Special_Unit_Name
     (Symbols : Internal_Symbol_Type_Array) return Boolean is
   begin
      --  Check that `Symbols` is of the form ("ada", "text_io", "xxx_io")
      --  with xxx_io being the name of one of the special packages.
      return Symbols'Length = 3
             and then Symbols (1 .. 2) = Ada_Text_IO_Symbol_Array
             and then (for some Special_Package_Name
                       of Ada_Text_IO_Special_Packages =>
                       Symbols (3) = Special_Package_Name);
   end Is_Special_Unit_Name;

   -------------------
   -- Actual_Target --
   -------------------

   function Actual_Target return Internal_Unit is
      Target : constant Internal_Unit := Node.Unit;
      T_Root : constant Bare_Ada_Node := Root (Target);
   begin
      if T_Root /= null and then T_Root.Kind = Ada_Compilation_Unit then
         declare
            Qualified_Name : constant Internal_Symbol_Type_Array :=
               Compilation_Unit_P_Syntactic_Fully_Qualified_Name
                 (T_Root).Items;
         begin
            if Is_Special_Unit_Name (Qualified_Name) then
               return Libadalang.Env_Hooks.Fetch_Unit
                 (Context,
                  Libadalang.Env_Hooks.Symbol_Type_Array
                    (Ada_Text_IO_Symbol_Array),
                  Node.Unit, Unit_Specification, True, False);
            end if;
         end;
      end if;
      return Target;
   end Actual_Target;

   ---------------------------
   -- All_Compilation_Units --
   ---------------------------

   function All_Compilation_Units_From
     (Root : Bare_Ada_Node) return CU_Array is
   begin
      if Root = null then
         return (1 .. 0 => <>);
      end if;

      case Root.Kind is
         when Ada_Compilation_Unit =>
            return (1 => Bare_Compilation_Unit (Root));
         when Ada_Compilation_Unit_List =>
            declare
               List : constant Bare_Compilation_Unit_List :=
                  Bare_Compilation_Unit_List (Root);

               Res : CU_Array (1 .. List.Count);
            begin
               for I in 1 .. List.Count loop
                  Res (I) := List.Nodes (I);
               end loop;
               return Res;
            end;
         when others =>
            return (1 .. 0 => <>);
      end case;
   end All_Compilation_Units_From;

   Target              : constant Internal_Unit := Actual_Target;
   Units_Import_Target : Analysis_Unit_Maps.Map;

   ------------------------
   -- Does_Import_Target --
   ------------------------

   function Does_Import_Target (From : in Internal_Unit) return Boolean is
      function Handle_Unit_Name
        (Symbols : in Libadalang.Env_Hooks.Symbol_Type_Array) return Boolean;
      --  Fetches the unit associated to the given name and returns whether
      --  this unit IS the target unit. If Transitive is True, recursively look
      --  if the target is one of the units imported by the given unit.

      ----------------------
      -- Handle_Unit_Name --
      ----------------------

      function Handle_Unit_Name
        (Symbols : in Libadalang.Env_Hooks.Symbol_Type_Array) return Boolean
      is
         Unit : Internal_Unit := Libadalang.Env_Hooks.Fetch_Unit
           (Node.Unit.Context, Symbols, Node.Unit,
            Unit_Specification, True, False);
      begin
         if Unit.AST_Root = null then
            --  The unit specification does not exist and the with clause
            --  actually imports the body.
            Unit := Libadalang.Env_Hooks.Fetch_Unit
              (Node.Unit.Context, Symbols, Node.Unit,
               Unit_Body, True, False);
         end if;
         return (Unit = Target
                 or else (Transitive and then Does_Import_Target (Unit)));
      end Handle_Unit_Name;

      Root_Node   : constant Bare_Ada_Node := Root (From);
      Units       : constant CU_Array :=
         All_Compilation_Units_From (Root_Node);

      Prelude     : Bare_Ada_Node;
      From_Cursor : constant Analysis_Unit_Maps.Cursor :=
         Units_Import_Target.Find (From);
   begin
      if Analysis_Unit_Maps.Has_Element (From_Cursor) then
         return Analysis_Unit_Maps.Element (From_Cursor);
      elsif Root_Node = null then
         return False;
      end if;

      if From = Target then
         Units_Import_Target.Insert (From, True);
         return True;
      end if;

      Units_Import_Target.Insert (From, False);

      --  Add all explicit references by processing "with" clauses.

      for Unit of Units loop
         Prelude := Unit.Compilation_Unit_F_Prelude;
         for I in 1 .. Children_Count (Prelude) loop
            if Child (Prelude, I).Kind = Ada_With_Clause then
               declare
                  Imported_Packages : constant Bare_Ada_Node :=
                     Child (Prelude, I).With_Clause_F_Packages;
               begin
                  for J in 1 .. Children_Count (Imported_Packages) loop
                     declare
                        Pkg : constant Bare_Name :=
                           Child (Imported_Packages, J);
                        Symbols : constant Symbol_Type_Array :=
                           Libadalang.Env_Hooks.Name_To_Symbols (Pkg);
                     begin
                        if Handle_Unit_Name (Symbols) then
                           Units_Import_Target.Replace (From, True);
                           return True;
                        end if;
                     end;
                  end loop;
               end;
            end if;
         end loop;
      end loop;

      --  Add all implicit references:
      --   - If this unit is a body, there is an implicit reference to its
      --     specification.
      --   - If this unit is a specification and a child unit, there is an
      --     implicit reference to its direct parent.

      declare
         Unit_Name : constant Symbol_Type_Array_Access :=
            Compilation_Unit_P_Syntactic_Fully_Qualified_Name (Root_Node);

         Parent_Symbols : constant Internal_Symbol_Type_Array :=
           (if Compilation_Unit_P_Unit_Kind (Root_Node) = Unit_Body
            then Unit_Name.Items
            else Unit_Name.Items
              (Unit_Name.Items'First .. Unit_Name.Items'Last - 1));
      begin
         if Parent_Symbols'Length > 0 then
            if Handle_Unit_Name
              (Libadalang.Env_Hooks.Symbol_Type_Array (Parent_Symbols))
            then
               Units_Import_Target.Replace (From, True);
               return True;
            end if;
         end if;
      end;

      return False;
   end Does_Import_Target;

   Result_Vector : Analysis_Unit_Vectors.Vector;
begin
   --  Place the units that satisfy the predicate into a temporary vector.
   for Unit of Units.Items loop
      if Does_Import_Target (Unit) then
         Result_Vector.Append (Unit);
      end if;
   end loop;

   --  Create the result array from the vector.
   declare
      Result : constant Internal_Unit_Array_Access :=
         Create_Internal_Unit_Array (Natural (Result_Vector.Length));
      N      : Positive := Result.Items'First;
   begin
      for Unit of Result_Vector loop
         Result.Items (N) := Unit;
         N := N + 1;
      end loop;
      return Result;
   end;
end Ada_Node_P_Filter_Is_Imported_By;
