## vim: filetype=makoada

   <%
      scn_var_type = capi.get_name('project_scenario_variable')
      scn_var_ptr = capi.get_name('project_scenario_variable_ptr')
      scn_var_array = capi.get_name('project_scenario_variable_array')
   %>

   function Scenario_Vars_Count
     (Scenario_Vars : System.Address) return Natural;
   --  Return the number of scenario variables in the Scenario_Vars C-style
   --  array. This counts the number of entries before the first NULL entry.

   -------------------------
   -- Scenario_Vars_Count --
   -------------------------

   function Scenario_Vars_Count (Scenario_Vars : System.Address) return Natural
   is
      Result : Natural := 1;
      SV     : ${scn_var_array} (Positive)
         with Import => True,
              Address => Scenario_Vars;
   begin
      loop
         exit when SV (Result).Name = Null_Ptr;
         Result := Result + 1;
      end loop;
      return Result - 1;
   end Scenario_Vars_Count;

   function ${capi.get_name('create_project_unit_provider')}
     (Project_File  : chars_ptr;
      Scenario_Vars   : System.Address;
      Target, Runtime : chars_ptr) return ${unit_provider_type}
   is
      PF            : constant String := Value (Project_File);
      Target_Value  : constant String :=
        (if Target = Null_Ptr then "" else Value (Target));
      Runtime_Value : constant String :=
        (if Runtime = Null_Ptr then "" else Value (Runtime));

      --  The following locals contain dynamically allocated resources. If
      --  project loading is successful, the result will own them, but in case
      --  of error, they should be free'd using the Error function below.

      Project : Project_Tree_Access := new Project_Tree;
      Env     : Project_Environment_Access;

      function Error return ${unit_provider_type};
      --  Helper for error handling: free allocated resources and return null

      -----------
      -- Error --
      -----------

      function Error return ${unit_provider_type} is
      begin
         Free (Env);
         Free (Project);
         return ${unit_provider_type} (System.Null_Address);
      end Error;

   begin
      --  Initialize the environment (target, runtime, externals) before
      --  loading the project.

      Initialize (Env);
      Env.Set_Target_And_Runtime (Target_Value, Runtime_Value);
      if Scenario_Vars /= System.Null_Address then
         declare
            Vars : ${scn_var_array} (1 .. Scenario_Vars_Count (Scenario_Vars))
               with Import  => True,
                    Address => Scenario_Vars;
         begin
            for V of Vars loop
               Change_Environment (Env.all, Value (V.Name), Value (V.Value));
            end loop;
         end;
      end if;

      --  Try to load the project

      begin
         Load (Project.all, Create (+PF), Env);
      exception
         when Invalid_Project =>
            return Error;
      end;

      --  Reject aggregate projects

      if Project.Root_Project.Is_Aggregate_Project then
         return Error;
      end if;

      --  Project loading was successful! Embed allocated data in the result.

      return Create_Unit_Provider_C_Reference
        (Project_Unit_Provider'(Create_Project_Unit_Provider
           (Project, Env, True)));
   end;

   function ${capi.get_name('create_auto_provider')}
     (Input_Files : System.Address;
      Charset     : chars_ptr)
      return ${unit_provider_type}
   is
      use GNATCOLL.VFS;

      type C_String_Array is array (Positive) of chars_ptr
         with Convention => C;

      Files_Count       : Natural := 0;
      Input_Files_Array : C_String_Array with
         Import  => True,
         Address => Input_Files;

      Actual_Charset : constant String :=
        (if Charset = Null_Ptr then Default_Charset else Value (Charset));
   begin
      while Input_Files_Array (Files_Count + 1) /= Null_Ptr loop
         Files_Count := Files_Count + 1;
      end loop;

      declare
         --  Allocate the array of filenames on the heap, as it may be too
         --  large for the stack.

         Files : File_Array_Access := new File_Array (1 .. Files_Count);
      begin
         for I in Files'Range loop
            Files (I) := Create (+Value (Input_Files_Array (I)));
         end loop;

         return Provider : ${unit_provider_type} :=
            Create_Unit_Provider_C_Reference
              (Create_Auto_Provider (Files.all, Actual_Charset))
         do
            Unchecked_Free (Files);
         end return;
      end;
   end;
