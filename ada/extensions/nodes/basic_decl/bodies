## vim: ft=makoada

---------------------------------
-- Bare_Basic_Decl_Short_Image --
---------------------------------

function Bare_Basic_Decl_Short_Image
  (Node : access Bare_Basic_Decl_Type'Class) return Text_Type
is
   Self : access Bare_Basic_Decl_Type'Class := Node;
   Ret  : Unbounded_Wide_Wide_String;

   function Name_Image (Node : access Bare_Expr_Type'Class) return Text_Type;
   --  Print a Dotted Name

   function Name_Image (Node : access Bare_Expr_Type'Class) return Text_Type
   is
      D : Bare_Dotted_Name;
   begin
      if Node = null then
         return "None";
      end if;

      if Node.all in Bare_Single_Tok_Node_Type'Class then
         return Node.Text;

      elsif Node.all in Bare_Dotted_Name_Type'Class then
         D := Bare_Dotted_Name_Type (Node.all)'Access;
         return Name_Image (D.F_Prefix) & "." & Name_Image (D.F_Suffix);

      elsif Node.all in Bare_Defining_Name_Type'Class then
         return Name_Image (Bare_Defining_Name (Node).F_Name);
      else
         return "<>";
      end if;
   end Name_Image;

   Children : Internal_Entity_Defining_Name_Array_Access :=
      Self.P_Defining_Names;
begin
   Append (Ret, "<" & To_Text (Kind_Name (Self)) & " [");

   for I in Children.Items'Range loop
      Append (Ret, """");
      Append (Ret, Name_Image (Children.Items (I).Node));
         Append (Ret, """");
      if I /= Children.Items'Last then
         Append (Ret, ", ");
      end if;
   end loop;
   Dec_Ref (Children);

   Append (Ret, "] "
           & To_Text
            (Ada.Directories.Simple_Name
               (Get_Filename (Unit (Node))))
           & ":"
           & To_Text (Image (Sloc_Range (Node))) & ">");

   return To_Wide_Wide_String (Ret);
end Bare_Basic_Decl_Short_Image;

-----------
-- P_Doc --
-----------

function P_Doc
  (Node : access Bare_Basic_Decl_Type'Class) return Character_Type_Array_Access
is
   use Libadalang.Doc_Utils;
   Decl : constant Libadalang.Analysis.Basic_Decl :=
      Wrap_Node (Node).As_Basic_Decl;
   Doc  : constant Doc_Type := Get_Documentation (Decl);
   Ret  : constant Character_Type_Array_Access :=
      Create_Character_Type_Array (Doc.Doc.Length);
begin
   Ret.Items := Doc.Doc.To_String;
   return Ret;
end P_Doc;

-----------------------
-- P_Doc_Annotations --
-----------------------

function P_Doc_Annotations
  (Node : access Bare_Basic_Decl_Type'Class)
   return Internal_Doc_Annotation_Array_Access
is
   use Libadalang.Doc_Utils;
   Decl : constant Libadalang.Analysis.Basic_Decl
     := Wrap_Node (Node).As_Basic_Decl;
   Doc  : constant Doc_Type := Get_Documentation (Decl);
   Ret  : constant Internal_Doc_Annotation_Array_Access :=
      Create_Internal_Doc_Annotation_Array
        (Natural (Doc.Annotations.Length));
   Idx  : Positive := 1;
begin
   for El in Doc.Annotations.Iterate loop
      declare
         Key     : constant Text_Type := Annotations_Maps.Key (El);
         Val     : constant Text_Type := Annotations_Maps.Element (El);
         DSL_Key : constant Character_Type_Array_Access :=
           Create_Character_Type_Array (Key'Length);
         DSL_Val : constant Character_Type_Array_Access :=
           Create_Character_Type_Array (Val'Length);
      begin
         DSL_Key.Items := Key;
         DSL_Val.Items := Val;
         Ret.Items (Idx) := (Key => DSL_Key, Value => DSL_Val);
      end;
      Idx := Idx + 1;
   end loop;
   return Ret;
end P_Doc_Annotations;
